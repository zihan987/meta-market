[1,["1brw/JvvpFnIvdrxpFCgMZ","f6SJZOjTJB/JrJeh5xTdF7","baIUdvKGZPgZxNbjWTFuRI","48rtkKMMBLWpFgBTWZHrPo@9aeec","48rtkKMMBLWpFgBTWZHrPo@b3edd","d5EC8LmLBCYZxhSIENFp0z@3c006","5aS6MOiHtGvIddbl9riKOp@50da3","5aS6MOiHtGvIddbl9riKOp@99e8e","5aS6MOiHtGvIddbl9riKOp@04dbd","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@2e76e","28jM4I8plAUKPXHcM623R1@77315","5aS6MOiHtGvIddbl9riKOp@9b39d","5aS6MOiHtGvIddbl9riKOp@106b7","d5EC8LmLBCYZxhSIENFp0z@0da8e","e00dlZnedI158egFvlvQ8K@f0c2f","52GtlwxdlNLa9vzAj5QjD4@f9941","83rCyo2jlMoZkogFhM6o4u@1f586","28jM4I8plAUKPXHcM623R1@3ecad","5aS6MOiHtGvIddbl9riKOp@f8ec1","5aS6MOiHtGvIddbl9riKOp@41b52","5aS6MOiHtGvIddbl9riKOp@e56aa","628su64MVHbZR5ACFraUKk@ff3bb","f7cWCCHHxC85ghwEgEId0o@5efed","b2SjEsjNtO8a838CZSUfae@62165","dc1kM4o3tAarwYJP72L8C0@2a72a","9fxH/AaExGL6CeRZ1dAts6@9d6ba","b2SjEsjNtO8a838CZSUfae@2d7a5","b2SjEsjNtO8a838CZSUfae@e632e","b2SjEsjNtO8a838CZSUfae@319d1","d5EC8LmLBCYZxhSIENFp0z@39555","e00dlZnedI158egFvlvQ8K@301f0","eaPENSJz5EULtHnptj7rqW","41mut0ORxDyY5Lz6x2b9JY@512ac","1aXvMm9ONHmZO/Tf/fyc8a@a9604","64j6F8159GipTelUAUVos1@d626b","07cflt335NI6lQhA2fKkl4@c1b8f","83rCyo2jlMoZkogFhM6o4u@41ac8","83rCyo2jlMoZkogFhM6o4u@438fe","28jM4I8plAUKPXHcM623R1@9b782","28jM4I8plAUKPXHcM623R1@221a5","28jM4I8plAUKPXHcM623R1@a8f38","28jM4I8plAUKPXHcM623R1@dd3de","28jM4I8plAUKPXHcM623R1@473f9","28jM4I8plAUKPXHcM623R1@40685","28jM4I8plAUKPXHcM623R1@8db92","28jM4I8plAUKPXHcM623R1@fa48b","28jM4I8plAUKPXHcM623R1@b9698","28jM4I8plAUKPXHcM623R1@eb9b0","28jM4I8plAUKPXHcM623R1@22e2a","28jM4I8plAUKPXHcM623R1@a6a29","28jM4I8plAUKPXHcM623R1@7270a","28jM4I8plAUKPXHcM623R1@271ab","28jM4I8plAUKPXHcM623R1@9aeec","28jM4I8plAUKPXHcM623R1@ca131","28jM4I8plAUKPXHcM623R1@ed9a5","28jM4I8plAUKPXHcM623R1@9549f","28jM4I8plAUKPXHcM623R1@76ab0","28jM4I8plAUKPXHcM623R1@3c023","28jM4I8plAUKPXHcM623R1@63a7c","28jM4I8plAUKPXHcM623R1@6fcb8","28jM4I8plAUKPXHcM623R1@d9126","28jM4I8plAUKPXHcM623R1@5f86b","28jM4I8plAUKPXHcM623R1@5f8c1","28jM4I8plAUKPXHcM623R1@50743","28jM4I8plAUKPXHcM623R1@0089c","28jM4I8plAUKPXHcM623R1@3effa","28jM4I8plAUKPXHcM623R1@9b633","48rtkKMMBLWpFgBTWZHrPo@d092b","48rtkKMMBLWpFgBTWZHrPo@2f365","48rtkKMMBLWpFgBTWZHrPo@4f3e5","48rtkKMMBLWpFgBTWZHrPo@d22ef","48rtkKMMBLWpFgBTWZHrPo@3ecad","48rtkKMMBLWpFgBTWZHrPo@77315","48rtkKMMBLWpFgBTWZHrPo@5d250","48rtkKMMBLWpFgBTWZHrPo@0c1af","48rtkKMMBLWpFgBTWZHrPo@2fa60","48rtkKMMBLWpFgBTWZHrPo@36946","48rtkKMMBLWpFgBTWZHrPo@51909","48rtkKMMBLWpFgBTWZHrPo@1c552","48rtkKMMBLWpFgBTWZHrPo@36a37","48rtkKMMBLWpFgBTWZHrPo@e421b","48rtkKMMBLWpFgBTWZHrPo@3da0d","48rtkKMMBLWpFgBTWZHrPo@a5a65","52GtlwxdlNLa9vzAj5QjD4@6c48a","5aS6MOiHtGvIddbl9riKOp@10509","5aS6MOiHtGvIddbl9riKOp@84ec4","5aS6MOiHtGvIddbl9riKOp@344b4","5aS6MOiHtGvIddbl9riKOp@e5ac2","5aS6MOiHtGvIddbl9riKOp@5cf5d","5aS6MOiHtGvIddbl9riKOp@93518","5aS6MOiHtGvIddbl9riKOp@16ca9","5aS6MOiHtGvIddbl9riKOp@98f68","5aS6MOiHtGvIddbl9riKOp@46afc","5aS6MOiHtGvIddbl9riKOp@f97e9","5aS6MOiHtGvIddbl9riKOp@3c7a5","5aS6MOiHtGvIddbl9riKOp@43561","5aS6MOiHtGvIddbl9riKOp@fca80","5aS6MOiHtGvIddbl9riKOp@9b1b4","5aS6MOiHtGvIddbl9riKOp@8e980","5aS6MOiHtGvIddbl9riKOp@34977","5aS6MOiHtGvIddbl9riKOp@ca676","5aS6MOiHtGvIddbl9riKOp@d789d","5aS6MOiHtGvIddbl9riKOp@9ea39","5aS6MOiHtGvIddbl9riKOp@9ad44","5aS6MOiHtGvIddbl9riKOp@6e0e4","5aS6MOiHtGvIddbl9riKOp@501ae","5aS6MOiHtGvIddbl9riKOp@9baf1","5aS6MOiHtGvIddbl9riKOp@d0dbd","5aS6MOiHtGvIddbl9riKOp@ede41","5aS6MOiHtGvIddbl9riKOp@47b9c","5aS6MOiHtGvIddbl9riKOp@66921","5aS6MOiHtGvIddbl9riKOp@220f7","5aS6MOiHtGvIddbl9riKOp@0a542","5aS6MOiHtGvIddbl9riKOp@7482d","5aS6MOiHtGvIddbl9riKOp@29417","5aS6MOiHtGvIddbl9riKOp@64e72","5aS6MOiHtGvIddbl9riKOp@6e274","5aS6MOiHtGvIddbl9riKOp@92a0a","5aS6MOiHtGvIddbl9riKOp@12db6","5aS6MOiHtGvIddbl9riKOp@2077a","5aS6MOiHtGvIddbl9riKOp@07fe3","5aS6MOiHtGvIddbl9riKOp@ef7c0","5aS6MOiHtGvIddbl9riKOp@e1983","5aS6MOiHtGvIddbl9riKOp@4dc09","5aS6MOiHtGvIddbl9riKOp@5ee70","5aS6MOiHtGvIddbl9riKOp@2433d","5aS6MOiHtGvIddbl9riKOp@83ace","5aS6MOiHtGvIddbl9riKOp@b04b2","5aS6MOiHtGvIddbl9riKOp@25bd8","5aS6MOiHtGvIddbl9riKOp@31cac","5aS6MOiHtGvIddbl9riKOp@9eab1","5aS6MOiHtGvIddbl9riKOp@7004c","5aS6MOiHtGvIddbl9riKOp@fc5b9","5aS6MOiHtGvIddbl9riKOp@2af8d","5aS6MOiHtGvIddbl9riKOp@75166","5aS6MOiHtGvIddbl9riKOp@01e45","5aS6MOiHtGvIddbl9riKOp@fccb0","5aS6MOiHtGvIddbl9riKOp@1fc6a","5aS6MOiHtGvIddbl9riKOp@aec7d","5aS6MOiHtGvIddbl9riKOp@40b7c","5aS6MOiHtGvIddbl9riKOp@f39e5","5aS6MOiHtGvIddbl9riKOp@7f4d5","5aS6MOiHtGvIddbl9riKOp@2dd59","5aS6MOiHtGvIddbl9riKOp@60ed8","5aS6MOiHtGvIddbl9riKOp@3d414","5aS6MOiHtGvIddbl9riKOp@b6172","5aS6MOiHtGvIddbl9riKOp@28143","5aS6MOiHtGvIddbl9riKOp@e184b","5aS6MOiHtGvIddbl9riKOp@ff217","5aS6MOiHtGvIddbl9riKOp@10947","5aS6MOiHtGvIddbl9riKOp@99cd7","5aS6MOiHtGvIddbl9riKOp@67780","5aS6MOiHtGvIddbl9riKOp@af49e","5aS6MOiHtGvIddbl9riKOp@e93ee","5aS6MOiHtGvIddbl9riKOp@70435","5aS6MOiHtGvIddbl9riKOp@9cd8c","5aS6MOiHtGvIddbl9riKOp@14a82","5aS6MOiHtGvIddbl9riKOp@d92d3","5aS6MOiHtGvIddbl9riKOp@fcf00","5aS6MOiHtGvIddbl9riKOp@db4d8","5aS6MOiHtGvIddbl9riKOp@7b8ce","5aS6MOiHtGvIddbl9riKOp@4e4f2","5aS6MOiHtGvIddbl9riKOp@36948","5aS6MOiHtGvIddbl9riKOp@e685d","5aS6MOiHtGvIddbl9riKOp@df873","5aS6MOiHtGvIddbl9riKOp@44df7","5aS6MOiHtGvIddbl9riKOp@721f1","5aS6MOiHtGvIddbl9riKOp@ec4d1","5aS6MOiHtGvIddbl9riKOp@85701","5aS6MOiHtGvIddbl9riKOp@9b734","5aS6MOiHtGvIddbl9riKOp@5826d","5aS6MOiHtGvIddbl9riKOp@0c990","5aS6MOiHtGvIddbl9riKOp@32808","5aS6MOiHtGvIddbl9riKOp@c21e3","5aS6MOiHtGvIddbl9riKOp@db9d0","5aS6MOiHtGvIddbl9riKOp@a61a7","5aS6MOiHtGvIddbl9riKOp@a47b3","5aS6MOiHtGvIddbl9riKOp@1140a","5aS6MOiHtGvIddbl9riKOp@75a78","5aS6MOiHtGvIddbl9riKOp@c7186","5aS6MOiHtGvIddbl9riKOp@df67c","5aS6MOiHtGvIddbl9riKOp@e7260","5aS6MOiHtGvIddbl9riKOp@52302","5aS6MOiHtGvIddbl9riKOp@5f1d2","5aS6MOiHtGvIddbl9riKOp@fb7ab","5aS6MOiHtGvIddbl9riKOp@d82c9","5aS6MOiHtGvIddbl9riKOp@f046b","5aS6MOiHtGvIddbl9riKOp@f528a","5aS6MOiHtGvIddbl9riKOp@cb72c","5aS6MOiHtGvIddbl9riKOp@4d887","5aS6MOiHtGvIddbl9riKOp@66164","5aS6MOiHtGvIddbl9riKOp@32cb3","5aS6MOiHtGvIddbl9riKOp@73688","5aS6MOiHtGvIddbl9riKOp@fa6f6","5aS6MOiHtGvIddbl9riKOp@ec951","5dS+TRD6xPArZYg8jZntiW@6c48a","628su64MVHbZR5ACFraUKk@53d12","628su64MVHbZR5ACFraUKk@9d6ba","628su64MVHbZR5ACFraUKk@ed609","628su64MVHbZR5ACFraUKk@28b13","628su64MVHbZR5ACFraUKk@fee83","628su64MVHbZR5ACFraUKk@bd90c","69D/bU3nFHB4HbqWlTcoYD@9aeec","69D/bU3nFHB4HbqWlTcoYD@3c7f7","69D/bU3nFHB4HbqWlTcoYD@e39f7","03Y/f4IE5BDq3gA63Kbqg1","628su64MVHbZR5ACFraUKk@baf83","e00dlZnedI158egFvlvQ8K@7fb31","e5jueDsRpG5rsfLGBaRL4I@8f97e","e6I86AKOpGlqT3hvk1Nn9f@73c7a","28jM4I8plAUKPXHcM623R1@4a89a","9ep/apFYNLYo0E4VhWcVaM@a133d","f7cWCCHHxC85ghwEgEId0o@29e75","b2SjEsjNtO8a838CZSUfae@0d1df","69D/bU3nFHB4HbqWlTcoYD@7c7e8","9fxH/AaExGL6CeRZ1dAts6@397c4","48rtkKMMBLWpFgBTWZHrPo@fad73","dc1kM4o3tAarwYJP72L8C0@b00b7","5aS6MOiHtGvIddbl9riKOp@c9ac3","d5EC8LmLBCYZxhSIENFp0z@94865","beoJdAtG1E24ivLwzz96/C","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","19a0gCAVNDtKa/acxW5cQU","a84fQIOEBGUIpxRE4Rn0jC","40eAurAAFBm4NSevKE6GsM","9ep/apFYNLYo0E4VhWcVaM@b5075","9fxH/AaExGL6CeRZ1dAts6@99ea5","9fxH/AaExGL6CeRZ1dAts6@a2905","9fxH/AaExGL6CeRZ1dAts6@f6ba9","9fxH/AaExGL6CeRZ1dAts6@715d2","9fxH/AaExGL6CeRZ1dAts6@ed9a5","9fxH/AaExGL6CeRZ1dAts6@c800e","9fxH/AaExGL6CeRZ1dAts6@22e2a","9fxH/AaExGL6CeRZ1dAts6@a3791","9fxH/AaExGL6CeRZ1dAts6@77315","9fxH/AaExGL6CeRZ1dAts6@51cfb","9fxH/AaExGL6CeRZ1dAts6@3ecad","9fxH/AaExGL6CeRZ1dAts6@46023","9fxH/AaExGL6CeRZ1dAts6@76ab0","9fxH/AaExGL6CeRZ1dAts6@7a66e","9fxH/AaExGL6CeRZ1dAts6@91cde","9fxH/AaExGL6CeRZ1dAts6@558f0","9fxH/AaExGL6CeRZ1dAts6@039e7","9fxH/AaExGL6CeRZ1dAts6@a7679","9fxH/AaExGL6CeRZ1dAts6@e0225","9fxH/AaExGL6CeRZ1dAts6@1b4c7","9fxH/AaExGL6CeRZ1dAts6@fee83","9fxH/AaExGL6CeRZ1dAts6@989bd","9fxH/AaExGL6CeRZ1dAts6@ff3bb","9fxH/AaExGL6CeRZ1dAts6@0bca5","9fxH/AaExGL6CeRZ1dAts6@8f26a","9fxH/AaExGL6CeRZ1dAts6@8bd39","9fxH/AaExGL6CeRZ1dAts6@0d890","9fxH/AaExGL6CeRZ1dAts6@8f88a","9fxH/AaExGL6CeRZ1dAts6@9aeec","9fxH/AaExGL6CeRZ1dAts6@c5f1b","9fxH/AaExGL6CeRZ1dAts6@7b245","9fxH/AaExGL6CeRZ1dAts6@f7c86","9fxH/AaExGL6CeRZ1dAts6@a22c7","9fxH/AaExGL6CeRZ1dAts6@1a093","9fxH/AaExGL6CeRZ1dAts6@9b633","9fxH/AaExGL6CeRZ1dAts6@9b782","9fxH/AaExGL6CeRZ1dAts6@0089c","9fxH/AaExGL6CeRZ1dAts6@f7e17","9fxH/AaExGL6CeRZ1dAts6@50743","9fxH/AaExGL6CeRZ1dAts6@55257","9fxH/AaExGL6CeRZ1dAts6@809d9","9fxH/AaExGL6CeRZ1dAts6@006bd","9fxH/AaExGL6CeRZ1dAts6@221a5","9fxH/AaExGL6CeRZ1dAts6@3effa","9fxH/AaExGL6CeRZ1dAts6@531b0","9fxH/AaExGL6CeRZ1dAts6@9c3d2","5dS+TRD6xPArZYg8jZntiW@f9941","b2SjEsjNtO8a838CZSUfae@febf3","b2SjEsjNtO8a838CZSUfae@c5d9e","b2SjEsjNtO8a838CZSUfae@80404","b2SjEsjNtO8a838CZSUfae@0475f","b2SjEsjNtO8a838CZSUfae@d29a3","b2SjEsjNtO8a838CZSUfae@1dcc7","b2SjEsjNtO8a838CZSUfae@3f2ee","b2SjEsjNtO8a838CZSUfae@833b1","b2SjEsjNtO8a838CZSUfae@c5d8f","b2SjEsjNtO8a838CZSUfae@477ba","b2SjEsjNtO8a838CZSUfae@84c3f","b2SjEsjNtO8a838CZSUfae@0f9ee","b2SjEsjNtO8a838CZSUfae@b748e","b2SjEsjNtO8a838CZSUfae@f52de","b2SjEsjNtO8a838CZSUfae@784dc","b2SjEsjNtO8a838CZSUfae@4a17b","b2SjEsjNtO8a838CZSUfae@342c9","b2SjEsjNtO8a838CZSUfae@052bc","b2SjEsjNtO8a838CZSUfae@9e024","b2SjEsjNtO8a838CZSUfae@258a3","b2SjEsjNtO8a838CZSUfae@4efad","b2SjEsjNtO8a838CZSUfae@f6dc7","b2SjEsjNtO8a838CZSUfae@3effa","b2SjEsjNtO8a838CZSUfae@99ea5","b2SjEsjNtO8a838CZSUfae@9b633","b2SjEsjNtO8a838CZSUfae@531b0","b2SjEsjNtO8a838CZSUfae@50743","b2SjEsjNtO8a838CZSUfae@006bd","b2SjEsjNtO8a838CZSUfae@9b782","b2SjEsjNtO8a838CZSUfae@0089c","b2SjEsjNtO8a838CZSUfae@221a5","d5EC8LmLBCYZxhSIENFp0z@c1a41","d5EC8LmLBCYZxhSIENFp0z@2d266","d5EC8LmLBCYZxhSIENFp0z@342da","d5EC8LmLBCYZxhSIENFp0z@edc65","d5EC8LmLBCYZxhSIENFp0z@72912","d5EC8LmLBCYZxhSIENFp0z@2d556","d5EC8LmLBCYZxhSIENFp0z@c91cb","d5EC8LmLBCYZxhSIENFp0z@8ad1f","d5EC8LmLBCYZxhSIENFp0z@418fd","d5EC8LmLBCYZxhSIENFp0z@e5574","d5EC8LmLBCYZxhSIENFp0z@946eb","d5EC8LmLBCYZxhSIENFp0z@5d26e","d5EC8LmLBCYZxhSIENFp0z@c6167","d5EC8LmLBCYZxhSIENFp0z@8c525","d5EC8LmLBCYZxhSIENFp0z@0d9c3","d5EC8LmLBCYZxhSIENFp0z@df9df","d5EC8LmLBCYZxhSIENFp0z@ae6eb","d5EC8LmLBCYZxhSIENFp0z@e1aeb","d5EC8LmLBCYZxhSIENFp0z@2396e","d5EC8LmLBCYZxhSIENFp0z@21712","d5EC8LmLBCYZxhSIENFp0z@2d1d2","d5EC8LmLBCYZxhSIENFp0z@ad23b","d5EC8LmLBCYZxhSIENFp0z@69518","d5EC8LmLBCYZxhSIENFp0z@3046c","d5EC8LmLBCYZxhSIENFp0z@6b9d7","d5EC8LmLBCYZxhSIENFp0z@85cb7","d5EC8LmLBCYZxhSIENFp0z@24d85","d5EC8LmLBCYZxhSIENFp0z@1ee96","d5EC8LmLBCYZxhSIENFp0z@f8913","d5EC8LmLBCYZxhSIENFp0z@7bf15","d5EC8LmLBCYZxhSIENFp0z@bff75","d5EC8LmLBCYZxhSIENFp0z@917b0","d5EC8LmLBCYZxhSIENFp0z@92299","d5EC8LmLBCYZxhSIENFp0z@38358","d5EC8LmLBCYZxhSIENFp0z@53ac1","d5EC8LmLBCYZxhSIENFp0z@0e110","d5EC8LmLBCYZxhSIENFp0z@18a7c","d5EC8LmLBCYZxhSIENFp0z@96073","d5EC8LmLBCYZxhSIENFp0z@f0718","d5EC8LmLBCYZxhSIENFp0z@e8a6e","d5EC8LmLBCYZxhSIENFp0z@f5232","d5EC8LmLBCYZxhSIENFp0z@d87ae","d5EC8LmLBCYZxhSIENFp0z@86bf8","d5EC8LmLBCYZxhSIENFp0z@4a96f","d5EC8LmLBCYZxhSIENFp0z@791c4","d5EC8LmLBCYZxhSIENFp0z@411ff","d5EC8LmLBCYZxhSIENFp0z@6ba8f","d5EC8LmLBCYZxhSIENFp0z@a9319","d5EC8LmLBCYZxhSIENFp0z@a461a","d5EC8LmLBCYZxhSIENFp0z@becc7","dc1kM4o3tAarwYJP72L8C0@e39f7","dc1kM4o3tAarwYJP72L8C0@22e2a","e00dlZnedI158egFvlvQ8K@3effa","e00dlZnedI158egFvlvQ8K@221a5","e00dlZnedI158egFvlvQ8K@b4036","e00dlZnedI158egFvlvQ8K@20d7a","e00dlZnedI158egFvlvQ8K@d1c7b","e00dlZnedI158egFvlvQ8K@4b82d","e00dlZnedI158egFvlvQ8K@c36c2","e00dlZnedI158egFvlvQ8K@2bdff","e00dlZnedI158egFvlvQ8K@67d91","e00dlZnedI158egFvlvQ8K@56bc5","e00dlZnedI158egFvlvQ8K@674a0","e00dlZnedI158egFvlvQ8K@98516","e00dlZnedI158egFvlvQ8K@ad80f","e00dlZnedI158egFvlvQ8K@5502a","e00dlZnedI158egFvlvQ8K@07a14","e00dlZnedI158egFvlvQ8K@b748e","e00dlZnedI158egFvlvQ8K@4425f","e00dlZnedI158egFvlvQ8K@319d1","e00dlZnedI158egFvlvQ8K@bddce","e00dlZnedI158egFvlvQ8K@b9e35","e00dlZnedI158egFvlvQ8K@c2f11","e00dlZnedI158egFvlvQ8K@c0c53","e00dlZnedI158egFvlvQ8K@72782","e00dlZnedI158egFvlvQ8K@0089c","e5jueDsRpG5rsfLGBaRL4I@22e2a","e5jueDsRpG5rsfLGBaRL4I@fc2ff","e6I86AKOpGlqT3hvk1Nn9f@e1c02","e6I86AKOpGlqT3hvk1Nn9f@22e2a","e6I86AKOpGlqT3hvk1Nn9f@3a837","f7cWCCHHxC85ghwEgEId0o@430d9","f7cWCCHHxC85ghwEgEId0o@20d7a","f7cWCCHHxC85ghwEgEId0o@45cd1"],["node","_mesh","_effectAsset","targetInfo","mainTexture","root","_parent","_material","data","asset","_spriteFrame","_textureSource","stick","disk","namePos","mesh","ani","_skeleton","_defaultClip","target","source","_cameraComponent","webview","scene","_envmapHDR","_envmapLDR","prefabPlayer","prefabPlayerName","labelChatMsg","chatMsg"],[["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_prefab","_parent","_lpos","_components","_children","_lrot","_euler","_lscale"],-3,4,1,5,9,2,5,5,5],["cc.Node",["_name","_layer","_id","_objFlags","_prefab","_lpos","_components","_parent","_children","_lscale","_lrot","_euler","__editorExtras__"],-1,4,5,12,1,12,5,5,5,11],["cc.RigidBody",["_type","_group","_linearDamping","_enabled","node","__prefab","_linearFactor","_angularFactor"],-1,1,4,5,5],["cc.UITransform",["_name","node","_contentSize","__prefab","_anchorPoint"],2,1,5,4,5],["cc.BoxCollider",["_enabled","_material","node","_size","_center","__prefab"],2,6,1,5,5,4],["cc.Node",["_name","_parent","_prefab","_lpos","_components","_lrot","_euler","_children","_lscale"],2,1,4,5,2,5,5,9,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents","mountedChildren"],1,9,9,9],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_name","_left","_right","_alignMode","node","__prefab","_target"],-4,1,4,1],["cc.CylinderCollider",["_radius","_height","_center","_material","node","__prefab"],1,5,6,1,4],["cc.Camera",["_clearFlags","_visibility","_name","_fov","_orthoHeight","_enabled","_near","_projection","_priority","node","_color","__prefab"],-6,1,5,4],"cc.SpriteFrame",["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["cc.Sprite",["_type","_sizeMode","node","__prefab","_color","_spriteFrame"],1,1,4,5,6],["db75bbNJnxHYIdxo63CSRnv",["_distance","_enabled","speedFactor","node","focusTarget","__prefab"],0,1,1,4],["cc.Material",["_states","_defines","_name","_props"],0,12],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh","__prefab"],2,1,3,4,6,4],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_lineHeight","node","__prefab","_color"],-2,1,4,5],["cc.Node",["_name","_id","_parent","_children","_components","_lpos"],1,1,2,12,5],["cc.CompPrefabInfo",["fileId"],2],["ccc7fTjElVEQqB07I1JvC+N",["_name","node","__prefab","disk","stick"],2,1,4,1,1],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.PrefabInfo",["asset","fileId","root","instance"],1,1,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["6321ff57MxLS418yYxAxbqJ",["node","__prefab","ani","mesh","namePos"],3,1,4,1,1,1],["cc.SphereCollider",["_radius","node","__prefab","_center","_material"],2,1,4,5,6],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot"],2,1,4,3,4,1],["cc.ModelLightmapSettings",[],3],["cc.SkeletalAnimation",["playOnLoad","_useBakedAnimation","node","__prefab","_clips"],1,1,4,3],["cc.Material",["_name","_props","_defines"],0],["cc.MeshRenderer",["_materials","node","__prefab","lightmapSettings","_mesh"],2,1,4,4,6],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,12,4,6],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_enabled","_shadowColor"],2,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.MeshCollider",["_convex","node","_material","_mesh"],2,1,6,6],["59496ZMS1ZP2odlfQPBf0i2",["node","webview"],3,1,1],["cc.WebView",["_url","node","webviewEvents"],2,1,9],["cc.ClickEvent",[],3],["9dfe63auMVLFamVsoweEnmP",["BackModel","node","players","followCamera","netView","playerNames"],2,1,1,1,1,1],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["cc.LabelOutline",["_width","node","__prefab","_color"],2,1,4,5],["e268fARbZxCxKyfQcb5kYkG",["node","__prefab","chatMsg","labelChatMsg"],3,1,4,1,1],["cc.Layout",["_resizeMode","_layoutType","_paddingTop","_paddingBottom","node","__prefab"],-1,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[12,0,1,2,2],[19,0,2],[27,1],[23,0,1,2,3],[16,1,5,2,3,4,1],[0,0,7,9,6,2],[15,2,0,1,3,4],[46,0,1,2,2],[36,0,2],[15,0,1,3,3],[0,0,7,10,6,8,11,12,2],[0,0,7,9,6,8,2],[47,0,1,2,2],[45,0,1,2,3],[0,4,5,7,6,3],[21,0,1,2,3,2],[11,1],[0,0,10,6,2],[0,0,7,10,6,2],[0,0,7,9,6,8,11,2],[44,0,1,1],[6,0,3,2,2],[0,0,7,6,8,2],[0,0,7,10,6,8,2],[0,0,7,10,6,8,11,2],[2,0,4,2],[4,2,3,1,1],[6,0,2,2],[3,1,3,2,1],[2,1,0,4,3],[4,2,4,3,1,1],[0,0,10,6,8,11,2],[5,0,1,7,2,3,5,6,2],[16,0,1,2,3,4,2],[48,0,1,2,3],[11,0,2],[0,0,7,6,8,11,12,2],[0,0,2,7,9,8,11,13,12,3],[1,0,8,4,2],[3,1,1],[3,1,3,2,4,1],[31,0,1,2,3,4,1],[50,0,1,2,3,2],[0,0,1,10,9,6,8,3],[0,0,1,7,10,9,6,8,3],[0,0,10,6,8,2],[0,0,7,10,9,6,8,11,2],[3,1,2,1],[22,0,1,2,3,3],[13,2,3,4,5,1],[30,0,1,2,3,4,2],[53,1],[0,0,1,7,9,6,13,3],[0,0,1,7,9,6,3],[0,0,3,7,9,6,8,11,12,3],[0,0,7,10,9,6,2],[0,0,4,2,10,9,4],[0,0,1,2,7,9,8,4],[0,0,1,2,7,9,8,11,13,12,4],[0,0,7,9,2],[0,0,2,7,9,8,11,12,3],[0,0,3,1,7,10,9,6,8,4],[0,0,1,9,6,8,3],[0,0,7,9,6,8,11,12,2],[0,0,7,9,6,8,13,2],[1,0,1,8,6,4,5,9,3],[1,0,1,7,6,5,9,3],[1,0,2,7,6,5,10,9,11,3],[1,3,7,4,12,2],[1,0,1,7,6,4,5,3],[1,0,8,4,5,10,11,2],[5,0,1,4,2,5,8,6,2],[5,0,1,7,2,3,2],[5,0,1,4,3,2],[18,0,1,2,3,4,5,3],[3,0,1,3,2,4,2],[7,3,0,1,2,7,8,5],[7,0,4,5,7,4],[7,0,1,2,6,7,8,9,5],[20,0,1,2,3,4,2],[12,0,3,4,2],[13,0,1,2,3,4,5,3],[24,0,1,2,3,4,1],[2,1,2,4,5,6,7,3],[2,1,0,3],[2,3,0,4,3],[2,0,2],[8,0,1,4,5,2,3,3],[8,0,1,4,2,3,3],[8,0,1,2,3,3],[4,0,2,5,4,3,1,2],[4,4,3,1,1],[4,0,2,1,2],[25,0,1,2,3,4,2],[9,2,5,0,1,9,11,10,5],[9,3,4,6,0,1,9,6],[9,2,7,8,3,4,0,1,9,10,8],[14,1,2,0,3,5,4,4],[14,0,3,4,2],[26,0,1,2,3,4,5,2],[28,0,1,2,3,4,3],[29,0,1,2,4],[32,0,1,2,3,4],[33,0,2],[34,0,1,2,3,2],[35,0,1,2,3,2],[37,0,1,2,3,4,1],[38,0,1,2,3,4,2],[39,0,1,2],[40,0,1,2,2],[41,1],[42,1],[43,0,1,1],[6,0,4,3,2,2],[6,0,1,2,3],[49,0,1,1],[51,0,1,1],[52,0,1,2,2],[54,0,1,2,3,4,5,2],[55,0,1,1],[56,1],[17,0,1,2,4,3,5,6,6],[17,0,1,2,3,5,6,7,5],[57,0,1,2,3,2],[58,0,1,2,3,1],[59,0,1,2,3,4,5,5],[60,0,1,2,4]],[[[[35,"Joystick"],[43,"Joystick",524288,[-7],[[75,"Joystick<UITransform>",-2,[1,"03ZUWxyGxEKrRNfAAZAjfl"],[5,960,640],[0,0,0]],[76,"Joystick<Widget>",45,40,36,-3,[1,"dfw8DiwVhOMqNxW3/MvA/u"]],[79,"Joystick<Joystick>",-6,[1,"b6/h8KXgpAI6dQQRwusaRr"],-5,-4]],[0,"25fHuwytBN2qk6dH5oVJvO",-1,0],[1,-480,-320,0]],[44,"disk",524288,1,[-9,-10],[[28,-8,[1,"f8l1UBgYFPm7f/KMYDjdJo"],[5,256,256]]],[0,"d0wZ2A2kRHRL52JXTqW2TD",1,0],[1,299.003,440.043,0]],[52,"stick",524288,2,[[28,-11,[1,"7fgMfPZ3pIZ72y8mESbyAp"],[5,256,256]],[49,-12,[1,"d8pnWua/5KaYBq0ggPBL1Y"],[4,3372220415],1]],[0,"ceQ/tc9/lBPIsW1Hwyb91a",1,0],[1,0.238,0.238,0.238]],[53,"base",524288,2,[[28,-13,[1,"daHOQp4LdBFoenok+XY1Zo"],[5,256,256]],[49,-14,[1,"b4yQwCjWpMRZUnITwiaJW8"],[4,687865855],0]],[0,"99DpUW4QRIJ4zS/1nooi0x",1,0]]],0,[0,5,1,0,0,1,0,0,1,0,12,3,0,13,2,0,0,1,0,-1,2,0,0,2,0,-1,4,0,-2,3,0,0,3,0,0,3,0,0,4,0,0,4,0,8,1,14],[0,0],[10,10],[16,16]],[[[3,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[35,"Player"],[65,"Player",8388608,[[-11,-12,-13,[22,"focusTarget",-15,[0,"37s2/kyNxO568xPvLY266X",-14,0],[1,0,3.555,0]],-16],1,1,1,4,1],[[-2,[82,-6,[1,"b7tyCsMIlHWILG7zMGKD5N"],-5,-4,-3],[83,2,1,-7,[1,"b0aY0+wL9EX4UqYRkQqvxo"],[1,1,0,1],[1,0.001,0.001,0.001]],[87,1.485,6.349,-8,[1,"2cIvBaN0tEHakEtXPnY4aU"],[1,0,2.5,0],6],[90,false,-9,[1,"bccgNhOBFLd6jGM362d5tt"],[1,0,3,0.2],[1,2,6,1.5],7],[93,1.25,-10,[1,"75vsRLL0JHe7cjQkU9FMEj"],[1,0,2,0.4],8]],1,4,4,4,4,4],[0,"67VbtwRoJEyYScJ1d2Y+ot",-1,0],[1,-1,0,0],[1,0.9,0.9,0.9]],[23,"mixamorig:Hips",1,[-17,-18,-19],[0,"123K9QYSZEOZj/KE3xX71G",1,0],[1,7.066133075661401e-16,3.161015033721924,0.3157094419002533]],[45,"mixamorig:Spine2",[-20,-21,-22],[0,"2aOGenCiNFy5u445uRTWmm",1,0],[1,0,0.41977113485336304,0]],[54,"Camera",false,1,[[94,"Camera<CameraComponent>",false,14,1073741824,-23,[1,"a9Mhq8PW1KF6V0TayVmGxg"],[4,4286073907]],[97,false,0.01,45,-24,[1,"9dxrt3fcJM+Y6G4+hIL6us"],1]],[0,"6anviTwkhP7IDfia9JmJVE",1,0],[1,5.440092820663267e-15,7.814167995011865,-44.31634888554937],[3,-5.336750069161486e-18,0.9961946980917455,0.08715574274765817,6.099933241728101e-17],[1,-10,180,0]],[71,"BASE_Low Poly Man",1,[-25],[0,"27JnsRNj9HsqwWTHD6uDmr",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[99,1,5,[1,"c8W2E0GrxJK5yz+0DfgFL1"],[0],[2],1],[10,"mixamorig:Spine",2,[-26],[0,"273ddi6BFOKZPzMDPaCqHt",1,0],[1,2.2270229953879467e-17,0.3122555613517761,-0.040167275816202164],[3,-0.06392303763550218,2.279513073669897e-18,-3.558734100279801e-17,0.9979548312721623],[1,-7.3300382770130765,1.6793120623620712e-23,-4.086366196535492e-15]],[23,"mixamorig:Spine1",7,[3],[0,"afouUjOWNNh5jPbxC/53C4",1,0],[1,6.310887100708772e-32,0.36729976534843445,0]],[10,"mixamorig:Neck",3,[-27],[0,"202yNichZNIqPFlZ6lU/mX",1,0],[1,1.1024913329811693e-23,0.4722425043582916,1.6415341974607145e-8],[3,0.06392309699659199,-2.2795174076828357e-18,3.5587304471259976e-17,0.9979548274698432],[1,7.330045093233236,-5.213579170421208e-16,4.052966904778745e-15]],[72,"mixamorig:Head",9,[[22,"mixamorig:HeadTop_End",-28,[0,"e8VrpIdo9F8IIaMPe5c2hJ",1,0],[1,3.350485409676484e-16,0.8519341945648193,0.3021720349788666]]],[0,"feW1j0xEBKxKbNNAYcnhuf",1,0],[1,4.4418487163354315e-17,0.11294372379779816,0.04005993902683258]],[10,"mixamorig:LeftShoulder",3,[-29],[0,"acgD1CTX5N/awH3ogdStpn",1,0],[1,0.1807839572429657,0.41611799597740173,-0.008018309250473976],[3,-0.555831424818592,-0.4295805634523135,0.5808521430544265,-0.4112453703048908],[1,107.01820691343079,92.51364708679515,-0.01127328900908959]],[10,"mixamorig:LeftArm",11,[-30],[0,"b1Na15N2VN/JErTd+74N5F",1,0],[1,0,0.3775598406791687,0],[3,0.3524489470920769,0.06964351371483403,-0.026312254878034468,0.9328650416509193],[1,41.39447727043304,8.539050586840734,3.87157487280474e-8]],[32,"mixamorig:LeftForeArm",12,[[22,"mixamorig:LeftHand",-31,[0,"79Tes3cGdKlbZE2QcBx00U",1,0],[1,-1.4210854397564648e-16,1.0636321306228638,0]]],[0,"2daMhp679MPZg8IOsVJOGs",1,0],[1,0,0.938069224357605,5.684341759025859e-16],[3,0.008739992991633295,0.03288815921396304,0.25668573424876107,0.9658956544778518],[1,-5.958897421538344e-9,3.9002660422649944,29.76462869878361]],[10,"mixamorig:RightShoulder",3,[-32],[0,"8eGHvEKptCW5dWdZJzVXf3",1,0],[1,-0.1807839572429657,0.4159158766269684,-0.0064469086937606335],[3,0.5585815298896404,-0.4274618914800963,0.5786707985323739,0.41279911909343003],[1,107.08238384964773,-92.01534334599988,0.01174317881676839]],[10,"mixamorig:RightArm",14,[-33],[0,"0fVX1O9c5I74jBnwibHW8i",1,0],[1,0,0.3775598406791687,-5.684341759025859e-16],[3,0.35231776907589557,-0.08098714541686036,0.030619407963638795,0.9318667950552636],[1,41.42094395840937,-9.934019816241669,-9.528605362736331e-8]],[32,"mixamorig:RightForeArm",15,[[22,"mixamorig:RightHand",-34,[0,"13eSWL9klFB6dHi+nBRho6",1,0],[1,-2.8421708795129297e-16,1.0654693841934204,5.684341759025859e-16]]],[0,"e3DiWSLAhPVJ5CI3U/giPC",1,0],[1,-1.776356799695581e-17,0.9382628798484802,-5.684341759025859e-16],[3,0.005323946059039633,-0.01946195791589554,-0.2638081336320065,0.9643641202481755],[1,-3.157062347441267e-8,-2.3122733078971263,-30.598669395880584]],[10,"mixamorig:LeftUpLeg",2,[-35],[0,"e4HcTa0A9LTY8DcH7+nX7S",1,0],[1,0.3099932074546814,-0.17341552674770355,-0.009417400695383549],[3,-0.004338907117997832,-0.0331717024828223,0.9909986945162838,-0.12962406993469117],[1,176.03264134430177,178.9803471113786,-14.869996780776349]],[10,"mixamorig:LeftLeg",17,[-36],[0,"9beXICe2VPT5+dSpJuqLx9",1,0],[1,0,1.456031084060669,-1.776356799695581e-17],[3,-0.009331881190512233,0.0003669209593394547,-0.039287008858177375,0.9991843234846278],[1,-1.0701966583693432,-3.2719716686052424e-9,-4.50331499745158]],[10,"mixamorig:LeftFoot",18,[-37],[0,"11ovpvwDZHgokrwDZUOMGb",1,0],[1,-2.8421708795129297e-16,1.2741219997406006,2.6645351995433716e-17],[3,0.46970028380874423,-0.007802716571925668,0.004151579054097423,0.8827816974742061],[1,56.03206761983606,-1.0128236302675178,-2.1054846343619002e-8]],[32,"mixamorig:LeftToeBase",19,[[22,"mixamorig:LeftToe_End",-38,[0,"65zDH70lFAbYx4AvzJfsWK",1,0],[1,1.4210854397564648e-16,0.20287422835826874,3.552713599391162e-17]]],[0,"0d3DxXoZJL4pZ83rPuHjRo",1,0],[1,0,0.568733274936676,0],[3,0.32762524096485335,-0.061728286755108726,0.02145653006283657,0.942544925939694],[1,38.334536747976856,-7.494023171158649,-1.4707722883488935e-7]],[10,"mixamorig:RightUpLeg",2,[-39],[0,"740I3CUJBG4I2B9dy5ltW+",1,0],[1,-0.3099932074546814,-0.17341552674770355,-0.00956771895289421],[3,0.004488874217930284,-0.03432348736292465,0.9909620265434561,0.1295994219600888],[1,175.8949170172971,-178.94516236425102,14.865334595705514]],[10,"mixamorig:RightLeg",21,[-40],[0,"d3R8wcCE1Lu6XXQWd64dMu",1,0],[1,0,1.4562466144561768,3.552713599391162e-17],[3,-0.006342380932634429,-0.0002491470139675615,0.03925182023920706,0.999209190679199],[1,-0.727348752885806,1.1574665018312255e-9,4.499173752709546]],[10,"mixamorig:RightFoot",22,[-41],[0,"5dQ2dZf7VHfaFdUn6cbIe7",1,0],[1,0,1.2737551927566528,5.329070399086743e-17],[3,0.467773207273587,0.008004428959004394,-0.004236533380733956,0.8838021313953345],[1,55.78218212398399,1.0378057188127623,2.0045147553833928e-8]],[32,"mixamorig:RightToeBase",23,[[22,"mixamorig:RightToe_End",-42,[0,"e7jXW89yhLdp+w75ZcwLPP",1,0],[1,1.4210854397564648e-16,0.20214232802391052,0]]],[0,"f5N89WVA1L77Y+N2tN46q4",1,0],[1,4.2632563192693945e-16,0.5681222081184387,-7.105427198782324e-17],[3,0.3280200266197467,0.06187442881563083,-0.021536643917822628,0.9423961959621213],[1,38.38296778385548,7.512896734368222,5.5604183982537236e-8]],[22,"namePos",1,[0,"35bpp+MrJO2JjfTKQo2sc6",1,0],[1,0,5.947,0]],[100,true,false,1,[1,"a0ZG9fpnpAh6vWb+6zaZhU"],[1,2,3,4,5]]],0,[0,5,1,0,-1,26,0,14,25,0,15,6,0,16,26,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,25,0,5,1,0,6,1,0,-5,4,0,-1,7,0,-2,17,0,-3,21,0,-1,9,0,-2,11,0,-3,14,0,0,4,0,0,4,0,-1,6,0,-1,8,0,-1,10,0,6,10,0,-1,12,0,-1,13,0,6,13,0,-1,15,0,-1,16,0,6,16,0,-1,18,0,-1,19,0,-1,20,0,6,20,0,-1,22,0,-1,23,0,-1,24,0,6,24,0,8,1,3,6,8,42],[0,0,0,0,0,0,0,0,0,6,6,26],[-1,-1,-2,-3,-4,-5,7,7,7,1,17,18],[32,17,33,34,35,36,2,2,2,37,38,17]],[[[6,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[39,0]],[[[3,".bin",1106637608,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":130656,"length":27744,"count":13872,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":130656,"count":2722,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-8.460952758789062,-7.842581748962402,-15.179389953613281],"maxPosition",8,[1,1.8394677639007568,5.050173282623291,-7.100326061248779]]],-1],0,0,[],[],[]],[[[3,".bin",3865732437,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":70992,"length":12672,"count":6336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":70992,"count":1479,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.947917938232422,-7.857424736022949,-17.075963973999023],"maxPosition",8,[1,7.873298168182373,-7.666414737701416,22.191543579101562]]],-1],0,0,[],[],[]],[[[6,"材质.4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.7000000000000001,"roughness":0},"albedoScale",8,[1,0.3607843137254902,0.4862745098039214,0.6862745098039216],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",730453760,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":864,"count":432,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.9396176338195801,-7.6817216873168945,9.902848243713379],"maxPosition",8,[1,1.3517800569534302,4.585352897644043,16.8929443359375]]],-1],0,0,[],[],[]],[[[6,"材质5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[40,0]],[[[16],[17,"装置架子",[-2],[0,"bd+silVA9cmJ3i/YKeorXN",-1,0]],[18,"扫描",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[0,"bfKEuFwRlZIoqMyqllV0HI",1,0]],[5,"扫描-材质4",2,[[4,-17,[1,"c3hReV0pRYsaVfhLBQqoHr"],[0],[2],1]],[0,"40NG928A1UvI9NRM6E/yiu",1,0]],[5,"扫描-材质5",2,[[4,-18,[1,"08IKDdroFfSbDvZF2Ym0fz"],[2],[2],3]],[0,"c1TiDzsCVbPrTOI9rUZb9T",1,0]],[5,"扫描-材质3",2,[[4,-19,[1,"5bVY0SqeVcO7K0j3iugBq0"],[4],[2],5]],[0,"64Zz+9ZypfO5YRcEd9O4QI",1,0]],[5,"扫描-材质1",2,[[4,-20,[1,"74AqpcYs9Ug5AxlnOWvO+T"],[6],[2],7]],[0,"29OWbHjaFelbSlQ0xcUaHX",1,0]],[5,"扫描-材质",2,[[4,-21,[1,"5aIaG+tDVR5YQ4Ym2BUoKb"],[8],[2],9]],[0,"20kibu0Ytc5Zzpc1lVCMHW",1,0]],[5,"扫描-材质2",2,[[4,-22,[1,"0deyruky5ZAIjPu760j2i2"],[10],[2],11]],[0,"50iB/eDsdSdokMEMVjxJwM",1,0]],[5,"扫描-材质.1",2,[[4,-23,[1,"ffH1G1HdJSOLkDAhph47Mk"],[12],[2],13]],[0,"85tHywgzBci6hCdLy5MzfR",1,0]],[5,"扫描-材质.2",2,[[4,-24,[1,"adgk7vVFZXW6Y+syy1or7V"],[14],[2],15]],[0,"22DYJt6hNb/6wUdIcYtuEC",1,0]],[5,"扫描-材质.3",2,[[4,-25,[1,"c2XmnzHKZbLotv0pL7Nm+g"],[16],[2],17]],[0,"5dBOgBEZVYL7wxTOcHKfc7",1,0]],[5,"扫描-材质.5",2,[[4,-26,[1,"73f2TtDHRWmo5Lxr9jwN/C"],[18],[2],19]],[0,"5c/qenKGJfMavDIaemvFxc",1,0]],[5,"扫描-材质.4",2,[[4,-27,[1,"68zL23xpRa5Yq8eMYzMGgk"],[20],[2],21]],[0,"4aks9lesVZBIAESJyMUjcR",1,0]],[5,"扫描-材质.5(__autogen 11)",2,[[4,-28,[1,"5f5b08ptBU7ZGm+XX439VX"],[22],[2],23]],[0,"77w40uWsFVmo1VSF5IMRW/",1,0]],[5,"扫描-材质.5(__autogen 12)",2,[[4,-29,[1,"980G9AjU5RzZbhWLwV8x9J"],[24],[2],25]],[0,"cdpik20aRU3Y2nk716tWbU",1,0]],[5,"扫描-材质.4(__autogen 13)",2,[[4,-30,[1,"d13faXtoJVx6mMPuEy+Tub"],[26],[2],27]],[0,"55aCWOfMRcOJ9rY7duNrou",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,8,1,30],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,11,59,18,60,11,61,11,62,18,63]],[[[3,".bin",501190406,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4800,"length":564,"count":282,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4800,"count":100,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.653510570526123,-7.849632263183594,-17.456174850463867],"maxPosition",8,[1,2.78586483001709,4.374285697937012,-5.392894744873047]]],-1],0,0,[],[],[]],[[[3,".bin",2846136385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":61920,"length":10224,"count":5112,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":61920,"count":1290,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.045069217681885,-7.852346420288086,-14.697142601013184],"maxPosition",8,[1,8.460952758789062,7.39022970199585,10.322278022766113]]],-1],0,0,[],[],[]],[[[3,".bin",3652923487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":540,"count":270,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.659961223602295,-7.849632263183594,-17.456174850463867],"maxPosition",8,[1,2.78586483001709,4.3123040199279785,-5.693021774291992]]],-1],0,0,[],[],[]],[[[3,".bin",4124526809,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10224,"length":1164,"count":582,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10224,"count":213,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.1362544298171997,-7.7476301193237305,5.8513503074646],"maxPosition",8,[1,2.284909963607788,6.792264938354492,18.673072814941406]]],-1],0,0,[],[],[]],[[[6,"材质2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[64,0]],[[[6,"材质.3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.7000000000000001,"roughness":0},"albedoScale",8,[1,0.27058823529411763,0.39607843137254894,0.6862745098039216],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.7000000000000001,"roughness":0},"albedoScale",8,[1,0.8235294117647058,0.8313725490196078,0.8274509803921567],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[65,0]],[[[3,".bin",3843742773,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23664,"length":4224,"count":2112,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23664,"count":493,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.1287670135498047,-7.844372272491455,-22.191543579101562],"maxPosition",8,[1,5.982753276824951,-7.669636249542236,-14.080022811889648]]],-1],0,0,[],[],[]],[[[6,"材质.1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.7000000000000001,"roughness":0},"albedoScale",8,[1,0.7294117647058823,0.5686274509803921,0.15686274509803924],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2305523217,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":48960,"length":6072,"count":3036,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":48960,"count":1020,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5800635814666748,-0.2760348320007324,5.101250648498535],"maxPosition",8,[1,0.9156688451766968,3.177093267440796,8.529433250427246]]],-1],0,0,[],[],[]],[[[6,"材质4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[66,0]],[[[6,"材质1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[67,0]],[[[3,".bin",3744905342,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4224,"length":456,"count":228,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4224,"count":88,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.9077482223510742,-7.690055847167969,5.048384189605713],"maxPosition",8,[1,1.3454030752182007,-4.835054397583008,14.567869186401367]]],-1],0,0,[],[],[]],[[[3,".bin",3581415308,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15312,"length":1812,"count":906,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15312,"count":319,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.428102970123291,-7.849632263183594,-5.611368179321289],"maxPosition",8,[1,2.5312812328338623,7.857424736022949,5.094467639923096]]],-1],0,0,[],[],[]],[[[3,".bin",3723017994,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":109248,"length":13416,"count":6708,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":109248,"count":2276,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5647410750389099,-7.817128658294678,3.9991207122802734],"maxPosition",8,[1,0.9640166759490967,-0.03234662488102913,10.389639854431152]]],-1],0,0,[],[],[]],[[[3,".bin",3409035240,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21792,"length":2688,"count":1344,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21792,"count":454,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5815165042877197,3.1861205101013184,5.212898254394531],"maxPosition",8,[1,0.9132692217826843,5.832797527313232,8.461833953857422]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.7000000000000001,"roughness":0},"albedoScale",8,[1,0.2235294117647059,0.3137254901960784,0.5254901960784314],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1918274560,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":81600,"length":10056,"count":5028,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":81600,"count":1700,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.279729962348938,3.7079215049743652,13.820378303527832],"maxPosition",8,[1,0.676118016242981,7.640665531158447,20.076553344726562]]],-1],0,0,[],[],[]],[[[6,"材质.14",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4293777094],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",1105178248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9984,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04784756898880005,-0.0664806142449379,-0.04858368635177612],"maxPosition",8,[1,0.04784756898880005,0.12731227278709412,0.04858368635177612]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[6,"材质.4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4290233765],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",1105178248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9984,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04784756898880005,-0.0664806142449379,-0.04858368635177612],"maxPosition",8,[1,0.04784756898880005,0.12731227278709412,0.04858368635177612]]],-1],0,0,[],[],[]],[[[3,".bin",485845100,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":66912,"length":27936,"count":6984,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":167136,"length":27648,"count":6912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":66912,"count":1394,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":94848,"length":72288,"count":1506,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.08123490959405899,-0.11348666995763779,-0.01807970553636551],"maxPosition",8,[1,0.08123490959405899,0.11348666995763779,0.01807970553636551]]],-1],0,0,[],[],[]],[[[6,"材质.5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4285897981],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"材质.1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4283457922],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",1105178248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9984,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04784756898880005,-0.0664806142449379,-0.04858368635177612],"maxPosition",8,[1,0.04784756898880005,0.12731227278709412,0.04858368635177612]]],-1],0,0,[],[],[]],[[[6,"乔木",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291748505],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[3,".bin",3245178081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10944,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":7008,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019142145290970802,-0.045368485152721405,-0.046166349202394485],"maxPosition",8,[1,0.019142145290970802,0.077583447098732,0.046166349202394485]]],-1],0,0,[],[],[]],[[[16],[38,"树",[[[36,"Cinema_4D_编辑器",-3,[0,"86Orw9jelQPIZ3SlOzwfAv",-2,0],[1,6,3,6],[3,-0.15606123619741927,0.9106032491976133,-0.06464267692231652,0.3771842221350199],[1,-5.27214871792338e-7,134.99999922474493,-19.45000065527169]],-4],4,1],[0,"73e0Dum65SJLufv17Wpw8W",-1,0]],[45,"入口区_树",[-5,-6,-7,-8,-9],[0,"14SL/LW2Nb+rwkQTJAui1R",1,0],[1,0.58079993724823,-0.0274196844547987,3.0140833854675293]],[18,"树",1,[-10,-11,-12,2],[0,"03NONoQg9XYLLdpOfp6k23",1,0]],[23,"树_舞台",3,[-13,-14,-15,-16],[0,"beCmR61BZVJ49eNJWn48ga",1,0],[1,-0.4581855237483978,-0.0274196844547987,-2.2072136402130127]],[23,"树_装饰架",3,[-17,-18,-19,-20],[0,"5alsORvl9aZ6xArUPr7tcX",1,0],[1,0.2684013545513153,-0.02795070968568325,0.2238810509443283]],[10,"树1_9",4,[-21],[0,"021sNenVNXSowkuFjhv9Az",1,0],[1,-0.5453082919120789,0,-0.060992125421762466],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk",6,[[4,-22,[1,"5bGS8InuNXI5pyQcCfYrTN"],[0,1],[2],2]],[0,"36ZbaPJF5VUqNm1/tbwqo/",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[10,"树1_8",4,[-23],[0,"81YPwHCn9S+pUhunY014JU",1,0],[1,0.0631098672747612,0,0.33612358570098877],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_2",8,[[4,-24,[1,"d9Wv2sJOJVMpNGQ3dKNDf/"],[3,4],[2],5]],[0,"5c5tlVXcBbIZ2mH9+AKcCG",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[10,"树1_7",4,[-25],[0,"424dVGQghSl6iJyEGThwQX",1,0],[1,0.00880549754947424,0,0.21550731360912323],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_3",10,[[4,-26,[1,"c0loHOPRBZsp2/0ARgb4Kc"],[6,7],[2],8]],[0,"a05bwF7wFf6ovSkJ0b53kk",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[10,"树1_6",4,[-27],[0,"9dcvBoBChRNLGJj/hv3RMl",1,0],[1,0.0036196932196617126,0,0.43908262252807617],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_4",12,[[4,-28,[1,"0eo47ed29a86KcQhsyO0BL"],[9,10],[2],11]],[0,"54EwhJdONQjpuCSbU/oM9v",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[11,"大风车2",3,[[4,-29,[1,"cePhqKqk5Su6WHe6mTGOjv"],[12,13],[2],14]],[0,"76wXlnWAZZ/LD2sBuPzaJs",1,0],[1,-0.37914296984672546,0.09075285494327545,-1.029891014099121]],[10,"树1_5",5,[-30],[0,"4bRkj4UbNWwooK0jIdeg7j",1,0],[1,-0.17117315530776978,-0.0033471088390797377,0.2438644915819168],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_5",15,[[4,-31,[1,"55O+3Kv5VUNpXRAZToxzPH"],[15,16],[2],17]],[0,"36M1qURSNbrI7G++08pVt8",1,0],[1,0,0.045368485152721405,-1.2434497928741312e-16]],[10,"树1_4",5,[-32],[0,"cen19xDYdeDIfC6rvu97Ys",1,0],[1,-0.16598735749721527,-0.0023697055876255035,0.02028917334973812],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_6",17,[[4,-33,[1,"dfikeIyChUEp/PXsowUijS"],[18,19],[2],20]],[0,"cav1FC7DlUZZ1J3CoQtr9W",1,0],[1,0,0.045368485152721405,-1.2434497928741312e-16]],[10,"树1_3",5,[-34],[0,"4f7U0Wd8JXOIkSDQXTCaQx",1,0],[1,-0.11168298125267029,-0.0033471088390797377,0.1409054547548294],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_7",19,[[4,-35,[1,"d3yqilHBhYLb8Z74wNldx3"],[21,22],[2],23]],[0,"cabGI6k3NYjLz9TCUvxdqZ",1,0],[1,0,0.045368485152721405,-1.2434497928741312e-16]],[23,"树2_4",5,[-36],[0,"ccZd2adv1SgbDNSYBpn2hP",1,0],[1,-0.7181427478790283,0.000531024590600282,-0.28979530930519104]],[11,"Trunk_8",21,[[4,-37,[1,"cepKpFPrFf/oRfL7dyxcFt"],[24,25],[2],26]],[0,"96MeL9HXJfqp7z668gx8eQ",1,0],[1,0,0.0664806142449379,0]],[23,"树2_3",2,[-38],[0,"1cy4kYTvtSd4LP2nWn8fyn",1,0],[1,-0.17357122898101807,-3.108624482185328e-17,-1.2153065204620361]],[11,"Trunk_9",23,[[4,-39,[1,"5er9UktfZWpruExj8EhuGC"],[27,28],[2],29]],[0,"daHEcUDgNXvKdLHO6dCUYx",1,0],[1,0,0.0664806142449379,0]],[10,"树1_2",2,[-40],[0,"59bOA/NStfnqKDgrAASVT9",1,0],[1,-0.10679537057876587,0.010844300501048565,-0.08970719575881958],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_10",25,[[4,-41,[1,"51nPoBCilV96zZ2/CFan9y"],[30,31],[2],32]],[0,"d8U4lYd7xfla+HpnG100BA",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[10,"树1",2,[-42],[0,"135KJPiMJQFIaUXxieRog8",1,0],[1,-0.16109974682331085,0.010844300501048565,-0.21032346785068512],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_11",27,[[4,-43,[1,"62tR+z/s5Z0Z97fFhVppZn"],[33,34],[2],35]],[0,"31CIrYz7BZhbX29CnFUISh",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[10,"树1_1",2,[-44],[0,"31rElrRD5TJa7S9tiBVyuw",1,0],[1,-0.16628554463386536,0.010844300501048565,0.013251851312816143],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[11,"Trunk_12",29,[[4,-45,[1,"32QVX696RcHYTCbZIxxF9S"],[36,37],[2],38]],[0,"67r3UsaxFeD4el5zOL/gdI",1,0],[1,0,0.045368485152721405,-1.4210854397564648e-16]],[23,"树2_2",2,[-46],[0,"1e4mFCbDBUSKKWRXuD29uQ",1,0],[1,-0.06287556141614914,-3.108624482185328e-17,0.48813310265541077]],[11,"Trunk_13",31,[[4,-47,[1,"a9w9E/kg1efZ2RYhq+vYP2"],[39,40],[2],41]],[0,"480eOJuLhcEpdPQYTFVZM/",1,0],[1,0,0.0664806142449379,0]]],0,[0,5,1,0,5,1,0,6,1,0,-2,3,0,-1,23,0,-2,25,0,-3,27,0,-4,29,0,-5,31,0,-1,4,0,-2,14,0,-3,5,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-1,15,0,-2,17,0,-3,19,0,-4,21,0,-1,7,0,0,7,0,-1,9,0,0,9,0,-1,11,0,0,11,0,-1,13,0,0,13,0,0,14,0,-1,16,0,0,16,0,-1,18,0,0,18,0,-1,20,0,0,20,0,-1,22,0,0,22,0,-1,24,0,0,24,0,-1,26,0,0,26,0,-1,28,0,0,28,0,-1,30,0,0,30,0,-1,32,0,0,32,0,8,1,2,6,3,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1],[3,4,68,3,4,69,3,4,70,3,4,71,72,73,74,3,4,75,3,4,76,3,4,77,3,4,78,3,4,79,3,4,80,3,4,81,3,4,82,3,4,83]],[[{"name":"circle256","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-128,-128,0,128,-128,0,-128,128,0,128,128,0],"indexes":[0,1,2,2,1,3],"uv":[0,256,256,256,0,0,256,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-128,"y":-128,"z":0},"maxPos":{"x":128,"y":128,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[10],0,[0],[11],[84]],[[[3,".bin",2423491533,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.848876953125,1.534061777348078e-13,-139.26324462890625],"maxPosition",8,[1,157.85655212402344,1,-139.26324462890625]]],-1],0,0,[],[],[]],[[[6,"摊位地面",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.7607843137254902,0.8313725490196078,0.9058823529411765],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",4043202162,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7488,"length":624,"count":312,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7488,"count":156,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.8740882873535156,-3.433384947740736e-15,-541.0313720703125],"maxPosition",8,[1,22.530784606933594,0.7609542608261108,-521.3746948242188]]],-1],0,0,[],[],[]],[[[3,".bin",477522329,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":1188,"count":594,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,162.44839477539062,1.2272495031936254e-13,-388.4254150390625],"maxPosition",8,[1,182.71507263183594,0.800000011920929,-368.1554870605469]]],-1],0,0,[],[],[]],[[[6,"摊位圆形",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.6235294117647059,0.8171982045830383,0.9019607843137255],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1396518228,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,156.6055908203125,1.534061777348078e-13,-143.21092224121094],"maxPosition",8,[1,156.61326599121094,1,-143.21092224121094]]],-1],0,0,[],[],[]],[[[3,".bin",4222031052,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-39.38022994995117,-8.88178432935015e-17,-134.38807678222656],"maxPosition",8,[1,39.38022994995117,-8.88178432935015e-17,134.38807678222656]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2563705124,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":1188,"count":594,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,133.6412353515625,1.2272495031936254e-13,-320.44232177734375],"maxPosition",8,[1,153.9079132080078,0.800000011920929,-300.1723937988281]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",996948995,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,158.018310546875,1.534061777348078e-13,-139.88626098632812],"maxPosition",8,[1,158.02598571777344,1,-139.88626098632812]]],-1],0,0,[],[],[]],[[[3,".bin",3741463364,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,153.68768310546875,1.534061777348078e-13,-137.26925659179688],"maxPosition",8,[1,153.69537353515625,1,-137.26925659179688]]],-1],0,0,[],[],[]],[[[3,".bin",2867823170,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.79808044433594,1.534061777348078e-13,-138.82968139648438],"maxPosition",8,[1,151.80577087402344,1,-138.82968139648438]]],-1],0,0,[],[],[]],[[[3,".bin",2162205342,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,155.6153106689453,1.534061777348078e-13,-137.22683715820312],"maxPosition",8,[1,155.62298583984375,1,-137.22683715820312]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1949192620,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.56942749023438,1.534061777348078e-13,-138.6968536376953],"maxPosition",8,[1,157.57711791992188,1,-138.6968536376953]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3482309289,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,156.73324584960938,1.534061777348078e-13,-137.77981567382812],"maxPosition",8,[1,156.7409210205078,1,-137.77981567382812]]],-1],0,0,[],[],[]],[[[3,".bin",715915861,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7200,"length":600,"count":300,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7200,"count":150,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-174.72018432617188,-3.433384947740736e-15,-942.0298461914062],"maxPosition",8,[1,-151.8915557861328,0.7609542608261108,-919.201171875]]],-1],0,0,[],[],[]],[[[3,".bin",3384050353,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12432,"length":1542,"count":771,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12432,"count":259,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-134.54681396484375,0,-341.37127685546875],"maxPosition",8,[1,42.91947555541992,6.866769895481472e-15,-135.16552734375]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3695607250,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,152.05191040039062,1.534061777348078e-13,-142.4595489501953],"maxPosition",8,[1,152.05960083007812,1,-142.4595489501953]]],-1],0,0,[],[],[]],[[[3,".bin",590086391,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15648,"length":1932,"count":966,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15648,"count":326,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-162.06890869140625,0,-288.6388854980469],"maxPosition",8,[1,162.06890869140625,0,288.6388854980469]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3195130920,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,158.06451416015625,1.534061777348078e-13,-140.54702758789062],"maxPosition",8,[1,158.0721893310547,1,-140.54702758789062]]],-1],0,0,[],[],[]],[[[6,"地板色",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.7294117647058823,0.8352941176470587,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2912101884,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,152.96844482421875,1.534061777348078e-13,-143.2943572998047],"maxPosition",8,[1,152.9761199951172,1,-143.2943572998047]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",4091627130,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.5460662841797,1.534061777348078e-13,-139.4041290283203],"maxPosition",8,[1,151.55374145507812,1,-139.4041290283203]]],-1],0,0,[],[],[]],[[[3,".bin",2299915226,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":588,"count":294,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,34.81981658935547,0,-341.37127685546875],"maxPosition",8,[1,58.89002990722656,0,-135.16552734375]]],-1],0,0,[],[],[]],[[[3,".bin",3431591557,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,154.98367309570312,1.534061777348078e-13,-137.1155242919922],"maxPosition",8,[1,154.9913787841797,1,-137.1155242919922]]],-1],0,0,[],[],[]],[[[3,".bin",4116099656,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1296,"length":150,"count":75,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1296,"count":27,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-20.53253746032715,0,-20.532527923583984],"maxPosition",8,[1,20.53253746032715,0,20.532527923583984]]],-1],0,0,[],[],[]],[[[3,".bin",51425375,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.38677978515625,1.534061777348078e-13,-140.68190002441406],"maxPosition",8,[1,151.39447021484375,1,-140.68190002441406]]],-1],0,0,[],[],[]],[[[6,"草地",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,0.46274509803921565,0.7725490196078432,0.32156862745098036],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2201673892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3024,"length":366,"count":183,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3024,"count":63,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,56.27561569213867,0,-313.3291320800781],"maxPosition",8,[1,92.81617736816406,0,-270.9765319824219]]],-1],0,0,[],[],[]],[[[3,".bin",4093764696,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46656,"length":3888,"count":1944,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":46656,"count":972,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-166.48794555664062,-3.433384947740736e-15,-921.0204467773438],"maxPosition",8,[1,19.819515228271484,0.7609542608261108,-535.6494140625]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2131003675,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2928,"length":354,"count":177,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2928,"count":61,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,7.408976078033447,0,-282.04949951171875],"maxPosition",8,[1,40.617759704589844,0,-239.69692993164062]]],-1],0,0,[],[],[]],[[[3,".bin",3027854824,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.7855682373047,1.534061777348078e-13,-141.7877960205078],"maxPosition",8,[1,157.79324340820312,1,-141.7877960205078]]],-1],0,0,[],[],[]],[[[3,".bin",546856701,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,152.5895233154297,1.534061777348078e-13,-137.87562561035156],"maxPosition",8,[1,152.5972137451172,1,-137.87562561035156]]],-1],0,0,[],[],[]],[[[3,".bin",866336024,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":180,"count":90,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,54.774375915527344,0,-163.87551879882812],"maxPosition",8,[1,97.24007415771484,0,-135.16552734375]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",505416455,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,156.05506896972656,1.534061777348078e-13,-143.51577758789062],"maxPosition",8,[1,156.06275939941406,1,-143.51577758789062]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3999917670,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.19313049316406,1.534061777348078e-13,-138.1985626220703],"maxPosition",8,[1,157.20083618164062,1,-138.1985626220703]]],-1],0,0,[],[],[]],[[[3,".bin",3007105667,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18720,"length":1560,"count":780,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":18720,"count":390,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-16.99465560913086,-0.8249333500862122,-49.36354446411133],"maxPosition",8,[1,16.99465560913086,0.8249333500862122,49.36354446411133]]],-1],0,0,[],[],[]],[[[3,".bin",3483527817,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-63.390419006347656,-3.433384947740736e-15,-702.1112060546875],"maxPosition",8,[1,-63.382808685302734,0.7609542608261108,-702.1112060546875]]],-1],0,0,[],[],[]],[[[3,".bin",4279109790,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":324,"count":162,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,50.972190856933594,0,-225.56072998046875],"maxPosition",8,[1,85.57438659667969,0,-188.8816680908203]]],-1],0,0,[],[],[]],[[[3,".bin",3312227265,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,152.1497344970703,1.534061777348078e-13,-138.3157958984375],"maxPosition",8,[1,152.15740966796875,1,-138.3157958984375]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2723504917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20640,"length":1848,"count":924,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":20640,"count":430,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-40.53273010253906,-0.4000000059604645,-135.74436950683594],"maxPosition",8,[1,40.53273010253906,0.4000000059604645,135.74436950683594]]],-1],0,0,[],[],[]],[[[6,"舞台广场",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.6000000000000001,0.6780487804878048,0.8],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3015729790,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.9834442138672,1.534061777348078e-13,-141.1878204345703],"maxPosition",8,[1,157.99114990234375,1,-141.1878204345703]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3540451493,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4752,"length":582,"count":291,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4752,"count":99,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,163.44366455078125,1,-387.452880859375],"maxPosition",8,[1,181.76675415039062,1.5165101289749146,-369.1324462890625]]],-1],0,0,[],[],[]],[[[3,".bin",607284449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-58.438358306884766,-3.433384947740736e-15,-700.0599975585938],"maxPosition",8,[1,-58.430755615234375,0.7609542608261108,-700.0599975585938]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2153150505,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,153.1060028076172,1.534061777348078e-13,-137.5223846435547],"maxPosition",8,[1,153.1136932373047,1,-137.5223846435547]]],-1],0,0,[],[],[]],[[[3,".bin",3848036307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,154.78900146484375,1.534061777348078e-13,-143.79209899902344],"maxPosition",8,[1,154.7966766357422,1,-143.79209899902344]]],-1],0,0,[],[],[]],[[[3,".bin",2089794375,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,154.14031982421875,1.534061777348078e-13,-143.74205017089844],"maxPosition",8,[1,154.1479949951172,1,-143.74205017089844]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"花池",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.8,0.7514666666666667,0.576],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",4189468415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.49627685546875,1.534061777348078e-13,-141.32923889160156],"maxPosition",8,[1,151.5039520263672,1,-141.32923889160156]]],-1],0,0,[],[],[]],[[[3,".bin",3336520775,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,152.47166442871094,1.534061777348078e-13,-142.91961669921875],"maxPosition",8,[1,152.47933959960938,1,-142.91961669921875]]],-1],0,0,[],[],[]],[[[6,"广场",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.7772000000000001,0.8,0.6480000000000001],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3038000374,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23808,"length":1788,"count":894,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23808,"count":496,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-65.0773696899414,-3.433384947740736e-15,-763.791015625],"maxPosition",8,[1,-4.110217094421387,0.7609542608261108,-670.7152099609375]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3349943463,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":186,"count":93,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-9.161550521850586,0,-9.160208702087402],"maxPosition",8,[1,9.161550521850586,0,9.160208702087402]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3311119604,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":115920,"length":10338,"count":5169,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":115920,"count":2415,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-152.3109893798828,-3.433384947740736e-15,-857.6865234375],"maxPosition",8,[1,-9.67750072479248,0.7609542608261108,-686.912353515625]]],-1],0,0,[],[],[]],[[[6,"水池",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.15,0.15,0.15],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3920031153,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12672,"length":1188,"count":594,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12672,"count":264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,150.1167755126953,1.534061777348078e-13,-145.0576629638672],"maxPosition",8,[1,159.32281494140625,1,-135.85015869140625]]],-1],0,0,[],[],[]],[[[3,".bin",4285529784,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,156.202880859375,1.534061777348078e-13,-137.45208740234375],"maxPosition",8,[1,156.21058654785156,1,-137.45208740234375]]],-1],0,0,[],[],[]],[[[3,".bin",289839908,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.48231506347656,1.534061777348078e-13,-142.33375549316406],"maxPosition",8,[1,157.489990234375,1,-142.33375549316406]]],-1],0,0,[],[],[]],[[[6,"水",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0},"albedoScale",8,[1,0.42400000000000004,0.7122666666666667,0.8],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2229239642,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15552,"length":1932,"count":966,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15552,"count":324,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-247.86154174804688,0,-969.406982421875],"maxPosition",8,[1,149.0221710205078,6.866769895481472e-15,-341.37127685546875]]],-1],0,0,[],[],[]],[[[16],[17,"地面整理926(1)",[-2],[0,"1chg7D3JxYlI0U5HCivs3W",-1,0]],[31,"花池1",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37],[0,"69RLTPvaBZ/IE8h7tCSLCZ",1,0],[1,-1.907721996307373,0,31.46579933166504],[3,0,0,0,-1]],[17,"摊位区域",[-38,-39,-40,-41,-42,-43,-44,-45,-46],[0,"79a40LoppfUbitg6easq0/",1,0]],[31,"地面.1",[-47,-48,-49,-50,-51,-52,-53,3],[0,"0ddqqVJvVeYouswyx83RTg",1,0],[1,31.093345642089844,-0.011474981904029846,20.511032104492188],[3,0,0,0,-1]],[18,"路水",4,[-54,-55,-56,-57,-58,-59],[0,"38r73XHqRVQJwN5Ufyp6hk",1,0]],[18,"Group10",3,[-60,-61,-62,-63,-64],[0,"dbyBiCzsdawpWLqLkgZpQ1",1,0]],[31,"绿地",[-65,2,-66],[0,"b0gNgWKpxbNY6Cv/AmDB/X",1,0],[1,-31.093345642089844,0.011474981904029846,-20.511032104492188],[3,0,0,0,-1]],[46,"花池大型",7,[-68,-69],[[4,-67,[1,"85dUNcyCRSzZugomw5uwZy"],[82],[2],83]],[0,"80BN/1MmBQSqlznDobtYrP",1,0],[1,152.48687744140625,0.4000000059604645,-245.90663146972656],[3,0,0,0,-1]],[24,"___1",8,[-70,-71,-72],[0,"a0b2tLROdSNJtIxT6SOdMK",1,0],[1,-152.48687744140625,-0.4000000059604645,245.90663146972656],[3,0,0,0,-1]],[18,"地面",1,[7,4],[0,"30Uh8pdbRfcoKOl+1oCiyQ",1,0]],[24,"2入口 ",7,[-73,-74],[0,"1cIkU+S7dUV6LZmeS1o312",1,0],[1,0.10030311346054077,0.24368563294410706,-0.22200235724449158],[3,0,0,0,-1]],[18,"Group17",5,[-75,-76],[0,"afeoCyd4ZeX7HwPq3WXqBE",1,0]],[55,"Group15",5,[-78],[[4,-77,[1,"4dTgjcqkFajomt8N9u6tGm"],[106],[2],107]],[0,"edCsKiL5tfk4nHheEflgsL",1,0]],[46,"花池",4,[-80],[[4,-79,[1,"2e7bZT4aZezZ4X2no41drw"],[110],[2],111]],[0,"e5rRWlTzZUGJVyYMJIF4Om",1,0],[1,124.9578628540039,0.4234376847743988,-226.11354064941406],[3,0,0,0,-1]],[18,"地砖",4,[-81,-82],[0,"69y5yuGfZcEJ64EF1ezMv0",1,0]],[5,"Mesh139",11,[[4,-83,[1,"d7N98S1u1ZY7nLAF9SWahI"],[0],[2],1]],[0,"f1TJsEqGRcIopH6oOMynji",1,0]],[19,"Group9",11,[[4,-84,[1,"36FYkF9nNSvLzF+l9TVdNi"],[2],[2],3]],[0,"82+vgJOKVTSLZt2RkWbY1o",1,0],[1,-0.05907716974616051,-0.7342635989189148,0.13563260436058044],[3,0,0,0,-1]],[5,"Mesh206",2,[[4,-85,[1,"abxiQ9lb1eDZEqtxonEZIZ"],[4],[2],5]],[0,"1eNiYhRGxSOa5jKnUT1sM2",1,0]],[5,"Mesh205",2,[[4,-86,[1,"a1eU03zbxV1KoSv53S8HIA"],[6],[2],7]],[0,"06ZRrzuOJScqAyaRIJwZBn",1,0]],[5,"Mesh204",2,[[4,-87,[1,"e43d3Jwalev5F4sLd/wogd"],[8],[2],9]],[0,"53ybfqJ/VWM6T5OcaNQ1mf",1,0]],[5,"Mesh203",2,[[4,-88,[1,"d0NachiTNdba71Mju52svU"],[10],[2],11]],[0,"d6Ibmb7TlYHLEI+yIH1puL",1,0]],[5,"Mesh202",2,[[4,-89,[1,"d5QGd+h0ZQYaTFno+S1Jze"],[12],[2],13]],[0,"9dlsvJpbRThKBtk8holari",1,0]],[5,"Mesh201",2,[[4,-90,[1,"b4zcYa00xVXIuCXP9h3M6W"],[14],[2],15]],[0,"9afZdrR4te8ZoGhkfSM7q9",1,0]],[5,"Mesh200",2,[[4,-91,[1,"db4F1J4EZQybHiu71g5sfT"],[16],[2],17]],[0,"6eQtYHt9dcvoTThWP9L3PZ",1,0]],[5,"Mesh199",2,[[4,-92,[1,"08aSB8wF5ak5s/H3glNKkS"],[18],[2],19]],[0,"56cnGZeXBdMp2KRpDk2PLn",1,0]],[5,"Mesh198",2,[[4,-93,[1,"1aupT3IVlX/rq0TSI+KnGk"],[20],[2],21]],[0,"97S33tm6NTWItQLAuXwoR1",1,0]],[5,"Mesh197",2,[[4,-94,[1,"d3K8zc04VWdJuQEvM+/Cdu"],[22],[2],23]],[0,"d17cOwwMtbErKLMaQwpiQL",1,0]],[5,"Mesh196",2,[[4,-95,[1,"7bmVji5qJS76BY3rztX1bD"],[24],[2],25]],[0,"aa6UaqAiVU/7yFip4cXg76",1,0]],[5,"Mesh195",2,[[4,-96,[1,"3572EIyjtSrKpc+ECYuTCq"],[26],[2],27]],[0,"db8CkQIYlbwoEmr0HGYu0e",1,0]],[5,"Mesh194",2,[[4,-97,[1,"20x7a52q5acLjpk0woij8Q"],[28],[2],29]],[0,"7erosoY81VsYSry43lenN6",1,0]],[5,"Mesh193",2,[[4,-98,[1,"83z6O3885YELTl8cVD1ouM"],[30],[2],31]],[0,"f3zx4zyPtZp4NUEhQ9+RSB",1,0]],[5,"Mesh192",2,[[4,-99,[1,"6et6HOqeVdA5JKO9L84zDp"],[32],[2],33]],[0,"13MxZvb1Zfp7bB7K+TeuMY",1,0]],[5,"Mesh191",2,[[4,-100,[1,"5b7kxss0da8Z5kR7GNUw6D"],[34],[2],35]],[0,"4bR7ncnOJaA7ZcD0pfO55U",1,0]],[5,"Mesh190",2,[[4,-101,[1,"6dhLTy/K5QQIib4yILm2mJ"],[36],[2],37]],[0,"386cNizcxSO6OBeRsjag1C",1,0]],[5,"Mesh189",2,[[4,-102,[1,"d27UJY6i9T04+8hY/Nd7L8"],[38],[2],39]],[0,"12p6+OpO1eVqLZkJyPZghT",1,0]],[5,"Mesh188",2,[[4,-103,[1,"81NO3PXfBbwp274w1H8K9C"],[40],[2],41]],[0,"a5t8uiJFhcL7Ncb24uz4Cu",1,0]],[5,"Mesh187",2,[[4,-104,[1,"96sF+vLBhfI6v/tgPeX2tg"],[42],[2],43]],[0,"5cfRlzNDlY7pmkpayTPOI9",1,0]],[5,"Mesh186",2,[[4,-105,[1,"c8uI8XI8xbM6du9DNkq9nV"],[44],[2],45]],[0,"71vX6A3epar45cpT0aUQET",1,0]],[5,"Mesh185",2,[[4,-106,[1,"1bDZKL/cRfu5qYN8fJ/Oc5"],[46],[2],47]],[0,"59fBOG8ytc+ruHmUaYyhvc",1,0]],[5,"Mesh184",2,[[4,-107,[1,"800aOZfk1ev5vqUXNJ9pVu"],[48],[2],49]],[0,"1fd95oFpZX8o7+p9q4v76+",1,0]],[5,"Mesh183",2,[[4,-108,[1,"499Lq5Cfxc87w5kShidad7"],[50],[2],51]],[0,"1eCfbkki9dPrZhXT7rFIDm",1,0]],[5,"Mesh182",2,[[4,-109,[1,"1f7Y6ETLleGo4yKe3X6LF7"],[52],[2],53]],[0,"a4zo/qpyhZj7K1W7fJ3KZ+",1,0]],[5,"Mesh181",2,[[4,-110,[1,"290xFDmutQtZQLh+1Ya7lL"],[54],[2],55]],[0,"c8Wh2X0pNeEZxxOBOaIj7A",1,0]],[5,"Mesh180",2,[[4,-111,[1,"13uv4oAJVZJKoiFz1Tr623"],[56],[2],57]],[0,"71As/Wrj1V8I0lH/62tU+l",1,0]],[5,"Mesh179",2,[[4,-112,[1,"8fhS9HHxVUWKXDlYaSCuix"],[58],[2],59]],[0,"0acyUjR1pWfbS+6q5XdRqN",1,0]],[5,"Mesh178",2,[[4,-113,[1,"f0uWpnQaNWT7BJFdpTSX7f"],[60],[2],61]],[0,"fdt422phBaeb+0V6PQlGJP",1,0]],[5,"Mesh177",2,[[4,-114,[1,"98E282K3Jd8LS0GLKQrc4y"],[62],[2],63]],[0,"432LezVJJfRYlxqRSdHILR",1,0]],[5,"Mesh176",2,[[4,-115,[1,"d0v7RNtRNaKrM7nclyAlgo"],[64],[2],65]],[0,"e0wx+qDNtdI5HUe2a543XN",1,0]],[5,"Mesh175",2,[[4,-116,[1,"55g+ZOWlZXPZRfx2O8b2vB"],[66],[2],67]],[0,"53Vg+8KDRX84LEVA3BzdHi",1,0]],[5,"Mesh174",2,[[4,-117,[1,"747ofYbzRbH4U3t4qbaaWu"],[68],[2],69]],[0,"ecuoWrcvVdZpFqR7ARZFNv",1,0]],[5,"Mesh173",2,[[4,-118,[1,"6d/PPL60JWw4fDz5WrtRBa"],[70],[2],71]],[0,"26hCs149NcVKNrNld0triY",1,0]],[5,"Group10",2,[[4,-119,[1,"82uvK3X+JQo40d98szY2BR"],[72],[2],73]],[0,"2fZuEwNPBX+b2OpAyyRoMJ",1,0]],[19,"Mesh02",9,[[4,-120,[1,"0f9L84b+1ed5xhxjNZHy/p"],[74],[2],75]],[0,"b6AeulEhZRIKQPv9SgXA/g",1,0],[1,156.3238983154297,1.5,-264.3491516113281],[3,0,0,0,-1]],[19,"Group5",9,[[4,-121,[1,"d17Y2XXwlfG7GaxR+Mxk7g"],[76],[2],77]],[0,"2b9dzlkvFWF6UunEyySp3H",1,0],[1,143.79803466796875,0.800000011920929,-310.3096008300781],[3,0,0,0,-1]],[5,"Mesh03",9,[[4,-122,[1,"95K5X0AP1cNLe8TtwZ20T/"],[78],[2],79]],[0,"2cZTbFFs1Q16XJE90Hez5c",1,0]],[24,"Group3",8,[-123],[0,"cbxhWl3vRWKZhdk/f7lGEl",1,0],[1,-152.48687744140625,-0.4000000059604645,245.90663146972656],[3,0,0,0,-1]],[19,"Mesh01",56,[[4,-124,[1,"c49tMpothYjIiQXcuB6kzi"],[80],[2],81]],[0,"35oIpEHu5ceLw2RfMYEUGg",1,0],[1,145.725830078125,1.5,-199.04656982421875],[3,0,0,0,-1]],[19,"广场",4,[[4,-125,[1,"3dJSkyACZcyK6g2CnbRvUk"],[84],[2],85]],[0,"0b578yzVFSm5ixylneAkWA",1,0],[1,-62.18669128417969,0.022949963808059692,-41.022064208984375],[3,0,0,0,-1]],[19,"地面",4,[[4,-126,[1,"60sU2Y+WVfx4+/dfkn2hs+"],[86],[2],87]],[0,"b5nTdFfVNYQ7Zml1LvLKr8",1,0],[1,-53.12034606933594,0,-719.8929443359375],[3,0,0,0,-1]],[19,"草地",4,[[4,-127,[1,"55EOnWExpS+bH8F/c0bFq5"],[88],[2],89]],[0,"1eW4ZVf9JRwZvBwQVZsLup",1,0],[1,-38.333984375,0,-723.4288940429688],[3,0,0,0,-1]],[19,"马路",4,[[4,-128,[1,"34pk2kXlhV0KpwEMkHKl1F"],[90],[2],91]],[0,"0cvC9cBr9Z9arWh59UBUZs",1,0],[1,73.0859375,0,-509.82843017578125],[3,0,0,0,-1]],[5,"Mesh13",5,[[4,-129,[1,"f0rasVFhhWNLPp07Lh0/5a"],[92],[2],93]],[0,"c07wlVJNhenagoBbqYRUSj",1,0]],[5,"Mesh12",5,[[4,-130,[1,"4ee4bPH7RZ8q23FaPsrFHx"],[94],[2],95]],[0,"8f0hdUvuRSPZ3WD6z3EYh9",1,0]],[5,"Mesh11",5,[[4,-131,[1,"cd+HIsH0FWuq5kZfWUD9Zw"],[96],[2],97]],[0,"ddTiWIJrtXGr9ShLjmf/G3",1,0]],[5,"Mesh10",5,[[4,-132,[1,"65lqe82hlXirJxv4Au9r1R"],[98],[2],99]],[0,"ea7jIV5UhRtKP5RVvC+q9P",1,0]],[5,"Mesh09",12,[[4,-133,[1,"86lbt1jpNa24Q5eNRraNxa"],[100],[2],101]],[0,"e06ljDptRUgoxImPmWudGf",1,0]],[5,"Mesh08",12,[[4,-134,[1,"a3taOYR4VY/4OwzdiFmkJC"],[102],[2],103]],[0,"97w9u+NfxZqZ1sZdWm3WcB",1,0]],[5,"Group16",13,[[4,-135,[1,"ecjvQMGHlfOqwcVjnGkOyM"],[104],[2],105]],[0,"56wGqkmIFYX7YN37GW2PBC",1,0]],[19,"Group13",14,[[4,-136,[1,"40d0b8pFhT5YBYZfqgRQbj"],[108],[2],109]],[0,"d2IvDrap5VipOsNlK/1u9z",1,0],[1,-0.0017503945855423808,0.4000000059604645,-0.202058807015419],[3,0,0,0,-1]],[5,"Mesh07",15,[[4,-137,[1,"7cJDQxyn1XHYfeUcn4/WvB"],[112],[2],113]],[0,"42W3Sb4mhdTp8QPrpI9VeN",1,0]],[5,"Mesh06",15,[[4,-138,[1,"52ttnFwJVZPKENyolKfrTG"],[114],[2],115]],[0,"e9YF2yk2tch5t4bgid1FlE",1,0]],[5,"Group9",3,[[4,-139,[1,"14H0Wi3o9QbYy4Io67y3L+"],[116],[2],117]],[0,"70Up83ShRWcY/Ul+huJJT8",1,0]],[5,"Group8",3,[[4,-140,[1,"a5UIk0YY1b+q2XW9IF/8xI"],[118],[2],119]],[0,"ecS10wqrNaMql76sLRYcEa",1,0]],[5,"Group7",3,[[4,-141,[1,"cfAZrw4aVRvrXqh+ce0YZM"],[120],[2],121]],[0,"57dFCQgrdWN6MIOucWMJjL",1,0]],[5,"Group6",3,[[4,-142,[1,"a1JTXeMVRYWafmGjdH1LED"],[122],[2],123]],[0,"95dVZtTf9cGqr9tuQiJoCW",1,0]],[5,"Group5",3,[[4,-143,[1,"acUXsNulJQAZeRDpSdpZ7y"],[124],[2],125]],[0,"009T6Y1CtWd7mnCSaQUpKA",1,0]],[5,"Group4",3,[[4,-144,[1,"9asMNLQi9WHpkPES41+FDF"],[126],[2],127]],[0,"denqlYewlZCY4AN8n2YV9O",1,0]],[5,"Group3",3,[[4,-145,[1,"deesDDxQNa2IjOEWEEDmAm"],[128],[2],129]],[0,"55D8yJZqpQSaDUmYHuJTDC",1,0]],[5,"Group2",3,[[4,-146,[1,"78Izra6MFZ3Iwt5yFusApr"],[130],[2],131]],[0,"8cUHPlLQxcmrOEJFUMjeVi",1,0]],[5,"Mesh05",6,[[4,-147,[1,"d1i0lG8JtTgoop/o/+h0T9"],[132],[2],133]],[0,"0bsHvUTV5bj7LLRieLmTgH",1,0]],[5,"Mesh04",6,[[4,-148,[1,"c5n1IcNK9Z4Yj0ovPWk6bH"],[134],[2],135]],[0,"0duNPO7g5Ym7hVfz/bIHwt",1,0]],[5,"Mesh03",6,[[4,-149,[1,"0d/vIEaY5UqreRegpVGuFn"],[136],[2],137]],[0,"df89Z1UbBf96sXcY8yrBCG",1,0]],[5,"Mesh02",6,[[4,-150,[1,"97kjrYhipfd7EX/6+L26UL"],[138],[2],139]],[0,"3f8Tc7KGxdir/3X7e5SkRl",1,0]],[5,"Mesh01",6,[[4,-151,[1,"bcEayeXk5cIJjbdVvpmKfi"],[140],[2],141]],[0,"04G6lZQ7lfXIcuY7cB820C",1,0]]],0,[0,5,1,0,-1,10,0,-1,18,0,-2,19,0,-3,20,0,-4,21,0,-5,22,0,-6,23,0,-7,24,0,-8,25,0,-9,26,0,-10,27,0,-11,28,0,-12,29,0,-13,30,0,-14,31,0,-15,32,0,-16,33,0,-17,34,0,-18,35,0,-19,36,0,-20,37,0,-21,38,0,-22,39,0,-23,40,0,-24,41,0,-25,42,0,-26,43,0,-27,44,0,-28,45,0,-29,46,0,-30,47,0,-31,48,0,-32,49,0,-33,50,0,-34,51,0,-35,52,0,-1,72,0,-2,73,0,-3,74,0,-4,75,0,-5,76,0,-6,77,0,-7,78,0,-8,79,0,-9,6,0,-1,58,0,-2,59,0,-3,60,0,-4,61,0,-5,5,0,-6,14,0,-7,15,0,-1,62,0,-2,63,0,-3,64,0,-4,65,0,-5,12,0,-6,13,0,-1,80,0,-2,81,0,-3,82,0,-4,83,0,-5,84,0,-1,11,0,-3,8,0,0,8,0,-1,9,0,-2,56,0,-1,53,0,-2,54,0,-3,55,0,-1,16,0,-2,17,0,-1,66,0,-2,67,0,0,13,0,-1,68,0,0,14,0,-1,69,0,-1,70,0,-2,71,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,0,50,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,-1,57,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,83,0,0,84,0,8,1,2,6,7,3,6,4,4,6,10,7,6,10,151],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[7,85,6,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,7,153,6,154,6,155,6,156,7,157,6,158,7,159,12,160,161,162,6,163,164,165,166,167,168,169,19,170,19,171,12,172,12,173,174,175,176,177,6,178,7,179,20,180,20,181,13,182,21,183,6,184,21,185,13,186,6,187,13,188,189,190,8,191,8,192,8,193,8,194,8,195]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"摊位路",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.7568627450980392,0.8941176470588234,0.9098039215686274],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2981477754,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.40513610839844,1.534061777348078e-13,-140.0259246826172],"maxPosition",8,[1,151.41282653808594,1,-140.0259246826172]]],-1],0,0,[],[],[]],[[[3,".bin",2732597564,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.72238159179688,1.534061777348078e-13,-141.9256134033203],"maxPosition",8,[1,151.73007202148438,1,-141.9256134033203]]],-1],0,0,[],[],[]],[[[3,".bin",3297783263,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":372,"count":186,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,50.69450378417969,0,-256.26416015625],"maxPosition",8,[1,89.93550872802734,0,-213.91159057617188]]],-1],0,0,[],[],[]],[[[3,".bin",2606062587,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7488,"length":624,"count":312,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7488,"count":156,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-14.012694358825684,-0.8249333500862122,-20.879934310913086],"maxPosition",8,[1,14.012694358825684,0.8249333500862122,20.879934310913086]]],-1],0,0,[],[],[]],[[[3,".bin",2807020940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7104,"length":576,"count":288,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7104,"count":148,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,136.39646911621094,2.1476865967075265e-13,-184.32113647460938],"maxPosition",8,[1,159.14004516601562,1.399999976158142,-163.40957641601562]]],-1],0,0,[],[],[]],[[[3,".bin",3140107673,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16560,"length":2058,"count":1029,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":16560,"count":345,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-151.59046936035156,0.7609542608261108,-856.9671020507812],"maxPosition",8,[1,-10.39850902557373,0.7609542608261108,-687.6334228515625]]],-1],0,0,[],[],[]],[[[3,".bin",1930339438,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1248,"length":144,"count":72,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-123.9685287475586,0,-135.16552734375],"maxPosition",8,[1,127.7344741821289,0,5.008045196533203]]],-1],0,0,[],[],[]],[[[3,".bin",2120086907,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3504,"length":426,"count":213,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3504,"count":73,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-186.01455688476562,0,-552.1785888671875],"maxPosition",8,[1,186.01455688476562,0,552.1785888671875]]],-1],0,0,[],[],[]],[[[3,".bin",1388465160,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,157.0851593017578,1.534061777348078e-13,-142.81251525878906],"maxPosition",8,[1,157.0928497314453,1,-142.81251525878906]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"摊位圆形",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.9607843137254902,0.9490196078431371,0.7098039215686275],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",974450028,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,155.44509887695312,1.534061777348078e-13,-143.7139129638672],"maxPosition",8,[1,155.45277404785156,1,-143.7139129638672]]],-1],0,0,[],[],[]],[[[6,"马路.5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.3,0.3,0.3],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3267241719,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":372,"count":186,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,6.8210248947143555,0,-339.525146484375],"maxPosition",8,[1,41.98264694213867,0,-297.17254638671875]]],-1],0,0,[],[],[]],[[[3,".bin",718058725,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":186,"count":93,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,151.390625,1,-143.79209899902344],"maxPosition",8,[1,158.06834411621094,1,-137.1155242919922]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1566741790,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":228,"count":114,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,54.774375915527344,0,-341.37127685546875],"maxPosition",8,[1,93.30831146240234,6.866769895481472e-15,-299.03033447265625]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1499109959,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,154.32310485839844,1.534061777348078e-13,-137.12942504882812],"maxPosition",8,[1,154.33079528808594,1,-137.12942504882812]]],-1],0,0,[],[],[]],[[[3,".bin",754435474,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2400,"length":288,"count":144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2400,"count":50,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,57.245235443115234,0,-198.5918426513672],"maxPosition",8,[1,89.08430480957031,0,-156.2392578125]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",4190685453,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3408,"length":414,"count":207,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3408,"count":71,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.461763858795166,0,-183.16439819335938],"maxPosition",8,[1,43.01534652709961,0,-140.8118133544922]]],-1],0,0,[],[],[]],[[[6,"小路.5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.73,0.8353658536585364,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3160269118,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,153.529052734375,1.534061777348078e-13,-143.57232666015625],"maxPosition",8,[1,153.5367431640625,1,-143.57232666015625]]],-1],0,0,[],[],[]],[[[3,".bin",2265727186,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3792,"length":462,"count":231,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3792,"count":79,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,51.184696197509766,0,-287.8955078125],"maxPosition",8,[1,93.4129638671875,0,-244.30601501464844]]],-1],0,0,[],[],[]],[[[3,".bin",1529586394,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3168,"length":384,"count":192,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3168,"count":66,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.461763858795166,0,-233.6157684326172],"maxPosition",8,[1,39.6962890625,0,-191.26318359375]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3746145573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42528,"length":3288,"count":1644,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":42528,"count":886,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-21.283329010009766,-0.4000000059604645,-68.2576675415039],"maxPosition",8,[1,21.283329010009766,0.4000000059604645,68.2576675415039]]],-1],0,0,[],[],[]],[[[9,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[{"name":"circle20","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[10,10,10,10],"vertices":{"rawPosition":[-10,-10,0,10,-10,0,-10,10,0,10,10,0],"indexes":[0,1,2,2,1,3],"uv":[0,20,20,20,0,0,20,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-10,"y":-10,"z":0},"maxPos":{"x":10,"y":10,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[10],0,[0],[11],[196]],[[[3,".bin",1521146667,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.888479709625244,-2.139897346496582,-1.9035475254058838],"maxPosition",8,[1,2.4833626747131348,-1.5556597709655762,1.1010262966156006]]],-1],0,0,[],[],[]],[[[3,".bin",541751027,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7872,"length":672,"count":336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7872,"count":164,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.8906872272491455,-1.5527275800704956,0.21937492489814758],"maxPosition",8,[1,2.483715295791626,3.888284683227539,1.102526068687439]]],-1],0,0,[],[],[]],[[[6,"材质.10",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.7843137254901961,0.7843137254901961,0.7843137254901961],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[16],[17,"入口书架2",[-2],[0,"bfZkalYBJYAqaii0lls94y",-1,0]],[24,"柜子",1,[-3,-4,-5,-6],[0,"61z+sBK09aUL9nyEgJC4Tu",1,0],[1,0.20246094465255737,-1.5530730485916138,0.4089099168777466],[3,0,0,0,-1]],[5,"柜子-材质.11",2,[[4,-7,[1,"fffWbaqYNa4qixfNquyHX0"],[0],[2],1]],[0,"56Iczq8AhWJ4Pj8f8uFPDD",1,0]],[5,"柜子-材质.10",2,[[4,-8,[1,"27bgjMgnxZepEpZ/ise+tF"],[2],[2],3]],[0,"d3ULGSJvZYCoS3rT8Xwtn4",1,0]],[5,"柜子-材质.11(__autogen 2)",2,[[4,-9,[1,"80xIP2Z2RZEIvZNjmH9VbL"],[4],[2],5]],[0,"c2daMaL+VU+5xeI7tW/czK",1,0]],[5,"柜子-材质.9",2,[[4,-10,[1,"8fr3mV8IRUxKUUsAaiiar2"],[6],[2],7]],[0,"89CyLtpBVbaoHJL5CJ8QNl",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,0,3,0,0,4,0,0,5,0,0,6,0,8,1,10],[0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1],[22,197,198,199,22,200,201,202]],[[[3,".bin",1466482728,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32352,"length":2952,"count":1476,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":32352,"count":674,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.8906872272491455,-1.5527275800704956,-1.0281004905700684],"maxPosition",8,[1,2.483715295791626,5.248284339904785,1.102526068687439]]],-1],0,0,[],[],[]],[[[3,".bin",1415749267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19392,"length":1728,"count":864,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19392,"count":404,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.8906872272491455,-0.19272755086421967,0.21937492489814758],"maxPosition",8,[1,2.483715295791626,5.248284339904785,1.102526068687439]]],-1],0,0,[],[],[]],[[[6,"材质.9",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.20392156862745095,0.2588235294117645,0.5372549019607843],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.11",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.5882352941176471,0.6980392156862745,0.7450980392156863],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",643868458,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-12.704000473022461,-5.855999946594238,-0.10599999874830246],"maxPosition",8,[1,12.704000473022461,5.855999946594238,0.10599999874830246]]],-1],0,0,[],[],[]],[[[16],[17,"入口海报923",[-2],[0,"06OGvrTqZaz7STm37YbUyP",-1,0]],[5,"入口海报",1,[[4,-3,[1,"e8o0o65i5ROYf5ya5JRumZ"],[0],[2],1]],[0,"8bgbzG33VRXqSaQl73fZ7n",1,0]]],0,[0,5,1,0,-1,2,0,0,2,0,8,1,3],[0,0],[-1,1],[203,204]],[[[6,"材质.1",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[205,0]],[[[3,".bin",1738360445,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":45888,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45888,"count":956,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]]},"minPosition",8,[1,-0.016810499131679535,-0.009339870885014534,-0.00028700585244223475],"maxPosition",8,[1,0.016810499131679535,0.0012407972244545817,0.05717577412724495]]],-1],0,0,[],[],[]],[[[102,"Skin-0",2894509818,["mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand"],[[[7,-98.35688781738281,18.05016326904297,0.33718836307525635,0,1.2072473764419556,8.439656257629395,-99.63591003417969,0,-18.012901306152344,-97.99471282958984,-8.51889419555664,0,0.9610735774040222,1.4463025331497192,-0.07882305234670639,1],[7,-98.33556365966797,11.80663776397705,-13.810150146484375,0,-0.554124116897583,-77.9223861694336,-62.672115325927734,0,-18.160669326782227,-61.552452087402344,76.69084167480469,0,0.9595301151275635,0.016751373186707497,-0.19632351398468018,1],[7,-99.29678344726562,8.723402976989746,-8.003162384033203,0,-8.723261833190918,-99.61817169189453,-0.35206717252731323,0,-8.003316879272461,0.3485454320907593,99.6786117553711,0,0.9257292151451111,-0.6313271522521973,0.09152277559041977,1],[7,-96.63575744628906,25.720243453979492,-3.2330969664010826e-16,0,1.719944715499878,6.462153434753418,-99.77616119384766,0,-25.66267204284668,-96.41944885253906,-6.687124729156494,0,1.0715301036834717,2.8206889629364014,-0.10582242906093597,1],[7,100,0,0,0,0,-0.000016292067812173627,-100,0,0,100,-0.000016292067812173627,0,-7.066133075661401e-16,-3.161015033721924,-0.3157094419002533,1],[7,100,7.073769077680899e-15,9.099403901809827e-16,0,1.1619591453155994e-21,12.758444786071777,-99.18276977539062,0,-7.132054685330888e-15,99.18276977539062,12.758444786071777,0,-4.811679712370012e-16,-3.409730911254883,-0.7164262533187866,1],[7,100,7.073761877900847e-15,9.0994123721393e-16,0,2.1030059351685963e-21,12.758456230163574,-99.18276977539062,0,-7.132047062034363e-15,99.18276977539062,12.758456230163574,0,-4.811682888743564e-16,-3.7770307064056396,-0.7164266705513,1],[7,30.914440155029297,42.35439682006836,-85.1492919921875,0,87.15909576416016,-48.43848419189453,7.550173282623291,0,-38.04719543457031,-76.54944610595703,-51.89019775390625,0,1.1976317167282104,2.387913942337036,2.8326199054718018,1],[7,-4.385740756988525,95.52942657470703,-29.238571166992188,0,99.08482360839844,0.4196300208568573,-13.491539001464844,0,-12.765695571899414,-29.56269073486328,-94.67356872558594,0,0.7165631055831909,1.2070547342300415,4.45456075668335,1],[7,0.004319760482758284,52.1137809753418,-85.34725189208984,0,99.98973083496094,1.2210067510604858,0.7506182789802551,0,1.4332712888717651,-85.3385238647461,-52.10837173461914,0,0.047191374003887177,3.6055009365081787,2.8359780311584473,1],[7,100,7.073761877900847e-15,9.0994123721393e-16,0,2.1030059351685963e-21,12.758456230163574,-99.18276977539062,0,-7.132047062034363e-15,99.18276977539062,12.758456230163574,0,-4.811682888743564e-16,-4.196801662445068,-0.7164266705513,1],[7,100,-2.5910323593254275e-30,4.403667970101315e-31,0,4.403663738321652e-31,-0.000016292067812173627,-100,0,2.5910323593254275e-30,100,-0.000016292067812173627,0,-8.179644176308681e-16,-4.722292423248291,-0.11487306654453278,1],[7,100,-2.5910323593254275e-30,4.403667970101315e-31,0,4.403663738321652e-31,-0.000016292067812173627,-100,0,2.5910323593254275e-30,100,-0.000016292067812173627,0,-8.623828783244428e-16,-4.835236072540283,-0.15493300557136536,1],[7,30.914440155029297,42.35439682006836,-85.1492919921875,0,87.15909576416016,-48.43848419189453,7.550173282623291,0,-38.04719543457031,-76.54944610595703,-51.89019775390625,0,1.1976317167282104,1.3242818117141724,2.8326199054718018,1],[7,-98.3563003540039,-18.055089950561523,-0.22921499609947205,0,-1.2493362426757812,8.071131706237793,-99.66592407226562,0,18.01327133178711,-98.02484893798828,-8.164034843444824,0,-0.9611218571662903,1.445687174797058,-0.08035038411617279,1],[7,-98.33601379394531,-11.815702438354492,13.799203872680664,0,0.5560314059257507,-77.88079071044922,-62.723785400390625,0,18.158185958862305,-61.60334014892578,76.65055847167969,0,-0.9595088958740234,0.015858294442296028,-0.19713763892650604,1],[7,-99.29608154296875,-8.750824928283691,7.981968879699707,0,8.752352714538574,-99.61569213867188,-0.3313960134983063,0,7.9802937507629395,0.3695468604564667,99.68038177490234,0,-0.9254963397979736,-0.632159411907196,0.09136198461055756,1],[7,-96.63676452636719,-25.716434478759766,2.097943697495423e-15,0,-1.7793257236480713,6.686318874359131,-99.76034545898438,0,25.654804229736328,-96.4051742553711,-6.9190216064453125,0,-1.0714775323867798,2.820950984954834,-0.09869588166475296,1],[7,-3.516714096069336,-95.5294189453125,29.355785369873047,0,-99.11880493164062,-0.4196232855319977,-13.23960018157959,0,12.770896911621094,-29.562702178955078,-94.67285919189453,0,-0.716843843460083,1.2060911655426025,4.454817295074463,1],[7,1.6002954244613647,-52.10301208496094,85.33882141113281,0,-99.91674041748047,2.370238780975342,3.320796489715576,0,-3.7529690265655518,-85.32091522216797,-52.02170181274414,0,0.06242203712463379,3.6061625480651855,2.8350346088409424,1],[7,30.86151885986328,-42.28135681152344,85.20477294921875,0,-87.02487182617188,-48.70995330810547,7.349316120147705,0,38.395816802978516,-76.4174575805664,-51.82792663574219,0,-1.2058771848678589,2.386376142501831,2.8302078247070312,1],[7,30.86151885986328,-42.28135681152344,85.20477294921875,0,-87.02487182617188,-48.70995330810547,7.349316120147705,0,38.395816802978516,-76.4174575805664,-51.82792663574219,0,-1.2058771848678589,1.3209067583084106,2.8302078247070312,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[103,"Main"],[56,"Main",512,"daC7dLnlZIiod2TkL523rL",[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[[39,-1]]],[104,"Main",[-36,-37,-38,1,-39,-40,-41,-42,-43],[80,"f46876e4-e81b-4931-b493-6d367be385e7",[[105,["joyStick"],-35,-34,[8,["b6/h8KXgpAI6dQQRwusaRr"]]]],[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33]],[106,[107,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[108,true,[4,4283190348]],[109,true,44,45],[110],[111]]],[74,"Canvas","52aSSYxMRC/7c5IO/zDyqX",2,[-49,-50,-51,-52],[[[47,-44,[5,750,1440]],[112,-46,-45],[77,45,-5.684341886080802e-14,-5.684341886080802e-14,-47],-48],4,4,4,1],[1,374.99999999999994,720,0]],[8,["25fHuwytBN2qk6dH5oVJvO"]],[14,512,null,1,[15,"bd+silVA9cmJ3i/YKeorXN",-61,[21,"9aJpvdPb5MAIjoT3oQ0V6D",[[20,[8,["bd+silVA9cmJ3i/YKeorXN"]],[[30,-58,[1,2,0,-11],[1,1,14.871,12.914],8],[29,4,2,-59],[30,-60,[1,2,0,11],[1,1,15,15],9]]]],[[13,"装置架子",["_name"],-53],[7,["_lpos"],-54,[1,-10,7,-162]],[7,["_lscale"],-55,[1,1,1,1]],[7,["_lrot"],-56,[3,0,0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],-57,[1,0,90,0]]]],7]],[14,0,{},1,[15,"d8oA8I1bdTu5L9kFoPDQOa",-70,[21,"de3+8kmspBkZPVopPIiJns",[[20,[8,["d8oA8I1bdTu5L9kFoPDQOa"]],[[29,4,2,-67],[30,-68,[1,-33,-9,-2],[1,24,40,18],22],[30,-69,[1,34,-9,1],[1,21,40,20],23]]]],[[13,"门头923修改ok",["_name"],-62],[7,["_lpos"],-63,[1,10,14,192]],[7,["_lscale"],-64,[1,0.5,0.5,0.5]],[7,["_lrot"],-65,[3,0,0,0,1]],[7,["_euler"],-66,[1,0,0,0]]]],21]],[14,0,{},1,[15,"beAHQUOGBQnYSx0nP3KbYy",-79,[21,"21CH4VC2hGjocNaaF15VaQ",[[20,[8,["beAHQUOGBQnYSx0nP3KbYy"]],[[25,2,-76],[30,-77,[1,0.01,0.05,-0.1],[1,0.21,0.17,0.2],30],[88,0.02,0.05,-78,[1,0.148,0.03,0.119],31]]]],[[13,"堡垒926",["_name"],-71],[7,["_lpos"],-72,[1,-49,-2,-251]],[7,["_lscale"],-73,[1,90,90,90]],[7,["_lrot"],-74,[3,0,0,0,1]],[7,["_euler"],-75,[1,0,0,0]]]],29]],[14,512,null,1,[15,"bfZkalYBJYAqaii0lls94y",-86,[113,"064pr7k8xIcY9mm9fHMjkH",[[115,[8,["bfZkalYBJYAqaii0lls94y"]],[-85]]],[[20,[8,["61z+sBK09aUL9nyEgJC4Tu"]],[[91,[1,0,2,0],[1,6.096,8.764,2],3],[84,4,2]]]],[[13,"入口书架2",["_name"],-80],[7,["_lpos"],-81,[1,6,3,157]],[7,["_lscale"],-82,[1,1,1,1]],[7,["_lrot"],-83,[3,0,0,0,1]],[7,["_euler"],-84,[1,0,0,0]],[12,["_lpos"],[8,["61z+sBK09aUL9nyEgJC4Tu"]],[1,0.202,-1.553,0.409]]]],1]],[8,["db/M0FVFBTrI6TRKRd7wzm"]],[8,["bfZkalYBJYAqaii0lls94y"]],[14,512,null,1,[15,"a1PbqU+fxUNKpDrwg0wHnH",-94,[21,"91UnR9n/JMTrVZcUPXBQU0",[[20,[8,["a1PbqU+fxUNKpDrwg0wHnH"]],[[26,-92,[1,15,3,3],5],[29,4,2,-93]]]],[[13,"入口坐凳",["_name"],-87],[7,["_lpos"],-88,[1,30,0,217]],[7,["_lscale"],-89,[1,1,1,1]],[7,["_lrot"],-90,[3,-0.5,0.5,0.4999999999999999,0.5000000000000001]],[7,["_euler"],-91,[1,-90,90,0]]]],4]],[8,["a1PbqU+fxUNKpDrwg0wHnH"]],[8,["4drfsD4WtfALtsxHQRiUGg"]],[8,["bd+silVA9cmJ3i/YKeorXN"]],[14,512,null,1,[15,"521k5McpNf8YoETcIfdphS",-102,[21,"c4ZlR0C6pFAImfpeSYF+EQ",[[20,[8,["521k5McpNf8YoETcIfdphS"]],[[92,false,-100,11],[85,false,2,-101]]]],[[13,"地面",["_name"],-95],[7,["_lpos"],-96,[1,0,13,0]],[7,["_lscale"],-97,[1,100,1,100]],[7,["_lrot"],-98,[3,0,0,0,1]],[7,["_euler"],-99,[1,0,0,0]],[12,["_lpos"],[8,["c5OD+K6phW962alRRFvRbX"]],[1,0,-15,0]]]],10]],[8,["521k5McpNf8YoETcIfdphS"]],[14,512,{},1,[15,"54jci1gr9dwqVROTiMRZaH",-110,[21,"83xaezQxRImKGC5d1Io/VI",[[20,[8,["54jci1gr9dwqVROTiMRZaH"]],[[29,4,2,-108],[42,true,-109,13,14]]]],[[13,"栏杆(1)",["_name"],-103],[7,["_lpos"],-104,[1,-41,1,166]],[7,["_lscale"],-105,[1,1,1,1]],[7,["_lrot"],-106,[3,0,0.2588190451025207,0,0.9659258262890684]],[7,["_euler"],-107,[1,0,29.999999999999993,0]]]],12]],[8,["54jci1gr9dwqVROTiMRZaH"]],[14,512,null,1,[15,"9dHhHxsoxXHIg3TyDhd6mK",-118,[21,"a21GKyTcZJ0q4pYxXZgAVP",[[20,[8,["9dHhHxsoxXHIg3TyDhd6mK"]],[[29,4,2,-116],[42,true,-117,16,17]]],[20,[8,["79ailSB0VVCKXmN4XvJzwS"]],[[86,2],[89,20,5,[1,0,-7,0],18]]]],[[13,"stageW",["_name"],-111],[7,["_lpos"],-112,[1,-63,8,-353]],[7,["_lscale"],-113,[1,0.9,0.9,0.9]],[7,["_lrot"],-114,[3,0,0,0,1]],[7,["_euler"],-115,[1,0,0,0]],[34,"stage",["_name"],[8,["79ailSB0VVCKXmN4XvJzwS"]]]]],15]],[8,["9dHhHxsoxXHIg3TyDhd6mK"]],[14,0,{},1,[15,"06OGvrTqZaz7STm37YbUyP",-126,[21,"f8B2jEtw1Lx6VGIeZrFT3P",[[20,[8,["06OGvrTqZaz7STm37YbUyP"]],[[26,-124,[1,25,12,0.5],20],[25,2,-125]]]],[[13,"入口海报923",["_name"],-119],[7,["_lpos"],-120,[1,35,4,215]],[7,["_lscale"],-121,[1,1,1,1]],[7,["_lrot"],-122,[3,0,0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],-123,[1,0,89.99999999999999,0]]]],19]],[8,["06OGvrTqZaz7STm37YbUyP"]],[8,["d8oA8I1bdTu5L9kFoPDQOa"]],[14,0,{},1,[15,"38aIBxDElT67GV2eR2ejf4",-134,[21,"53gzOS8NBFz5pSa936P6IL",[[20,[8,["38aIBxDElT67GV2eR2ejf4"]],[[25,2,-132],[42,true,-133,26,27]]]],[[13,"商场9.26(2)",["_name"],-127],[7,["_lpos"],-128,[1,-125,12,-91]],[7,["_lscale"],-129,[1,0.5,0.5,0.5]],[7,["_lrot"],-130,[3,0,0,0,1]],[7,["_euler"],-131,[1,0,0,0]]]],25]],[8,["38aIBxDElT67GV2eR2ejf4"]],[8,["1chg7D3JxYlI0U5HCivs3W"]],[8,["beAHQUOGBQnYSx0nP3KbYy"]],[8,["d2UqD5yQJToKpE5+BG3H4A"]],[8,["12rbijDhJc34X5MUk8RU0s"]],[57,"players",33554432,"065xK+Z7lJRLoWBKSFnFl8",2,[[39,-135]],[1,10,0,230]],[14,0,null,3,[15,"25fHuwytBN2qk6dH5oVJvO",-139,[27,"9aAUYqNThFuL1yOsWEfbfn",[[13,"Joystick",["_name"],4],[7,["_lpos"],4,[1,-375,-720,0]],[7,["_lscale"],4,[1,1,1,1]],[7,["_lrot"],4,[3,0,0,0,1]],[7,["_euler"],4,[1,0,0,0]],[12,["_contentSize"],[8,["03ZUWxyGxEKrRNfAAZAjfl"]],[5,750,1440]],[7,["_lpos"],-136,[1,400,589.043,-2]],[7,["_lscale"],-137,[1,1,1,1]],[13,33554432,["_layer"],4],[13,33554432,["_layer"],-138],[34,33554432,["_layer"],[8,["99DpUW4QRIJ4zS/1nooi0x"]]],[34,33554432,["_layer"],[8,["ceQ/tc9/lBPIsW1Hwyb91a"]]]]],0]],[66,"WebView",33554432,3,[[[47,-140,[5,107,100]],-141,[116,-143,-142]],4,1,4],[1,0,370,0],[1,7,7,1]],[37,"Plane","9bif2EVXdLm5hS7sW4Rzis",2,[[33,"Plane<ModelComponent>",-144,[32],[2],33],[25,2,-145],[26,-146,[1,10,0.001,10],34]],[1,-232,23,-155],[3,0,0,0.7071067811865475,0.7071067811865476],[1,10,0,100],[1,0,0,90]],[37,"Plane-001","c53N/GNhlKd4SeRAodxyJt",2,[[33,"Plane<ModelComponent>",-147,[35],[2],36],[25,2,-148],[26,-149,[1,10,0.001,10],37]],[1,223,24,-154],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,10,0,100],[1,0,0,-90]],[58,"Plane-002",8388608,"9ebyB7S4JIkotdIg+ZxuZK",2,[[33,"Plane<ModelComponent>",-150,[38],[2],39],[25,2,-151],[26,-152,[1,10,0.001,10],40]],[1,0,24,337],[3,0.7071067811865475,0,0,0.7071067811865476],[1,55,1,5],[1,90,0,0]],[37,"Plane-003","f3lxe3W+5G0aUsk5eC2o04",2,[[33,"Plane<ModelComponent>",-153,[41],[2],42],[25,2,-154],[26,-155,[1,10,0.001,10],43]],[1,-10,24,-648],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,55,1,5],[1,-90,0,0]],[67,"Main Camera","c9DMICJLFO5IeO07EPon7U",2,[[[95,60,667,6,14,1822425087,-156],-157],4,1],[1,7,7.0395509268103895,249.4459753267812],[3,-0.10452846326765347,0,0,0.9945218953682733],[1,0.1,0.1,0.1],[1,-12,0,0]],[8,["d0wZ2A2kRHRL52JXTqW2TD"]],[59,"PlayerNames",3,[[39,-158]]],[117,"http://127.0.0.1",32,[[51],[51]]],[68,512,8,[15,"db/M0FVFBTrI6TRKRd7wzm",-159,[27,"88QhgDPl5HjZG4tpTedA5U",[[13,"置物架",["_name"],9],[7,["_lpos"],9,[1,9,2,1]],[7,["_lscale"],9,[1,1,1,1]],[7,["_lrot"],9,[3,0,0,0,1]],[7,["_euler"],9,[1,0,0,0]]]],2],[{},"mountedRoot",1,8]],[14,512,null,1,[15,"4drfsD4WtfALtsxHQRiUGg",-160,[27,"b1VEEPTqBAJLMWgMHM3vw3",[[13,"帐篷",["_name"],13],[7,["_lpos"],13,[1,-42,3,130]],[7,["_lscale"],13,[1,0.5,0.5,0.5]],[7,["_lrot"],13,[3,0,0.3826834323650898,0,0.9238795325112867]],[7,["_euler"],13,[1,0,45,0]]]],6]],[14,0,null,1,[15,"73e0Dum65SJLufv17Wpw8W",-161,[114,"ddZySPxaZF0a4e0lrvrU9W",null,[[34,"树",["_name"],[8,["73e0Dum65SJLufv17Wpw8W"]]],[12,["_lpos"],[8,["73e0Dum65SJLufv17Wpw8W"]],[1,2,2,-222]],[12,["_lscale"],[8,["73e0Dum65SJLufv17Wpw8W"]],[1,100,100,100]],[12,["_lrot"],[8,["73e0Dum65SJLufv17Wpw8W"]],[3,0,0,0,1]],[12,["_euler"],[8,["73e0Dum65SJLufv17Wpw8W"]],[1,0,0,0]],[12,["_lpos"],[8,["14SL/LW2Nb+rwkQTJAui1R"]],[1,0.571,-0.027,3.014]],[12,["_lpos"],[8,["59bOA/NStfnqKDgrAASVT9"]],[1,-0.087,0.011,-0.37]],[12,["_lpos"],[8,["135KJPiMJQFIaUXxieRog8"]],[1,-0.161,0.011,-0.26]],[12,["_lpos"],[8,["31rElrRD5TJa7S9tiBVyuw"]],[1,-0.106,0.011,-0.157]],[12,["_lpos"],[8,["1cy4kYTvtSd4LP2nWn8fyn"]],[1,-0.164,0,-1.245]],[12,["_lpos"],[8,["1e4mFCbDBUSKKWRXuD29uQ"]],[1,-0.053,0,0.488]],[12,["_lpos"],[8,["ccZd2adv1SgbDNSYBpn2hP"]],[1,-0.558,0.001,-0.02]],[12,["_lpos"],[8,["76wXlnWAZZ/LD2sBuPzaJs"]],[1,-0.379,0.071,-1.03]]]],24]],[14,0,null,1,[15,"1chg7D3JxYlI0U5HCivs3W",-162,[27,"2fvWO52HNNwKCj6kMAnh2D",[[13,"地面整理926(1)",["_name"],26],[7,["_lpos"],26,[1,-50,-1.9,237]],[7,["_lscale"],26,[1,0.85,0.85,0.85]],[7,["_lrot"],26,[3,0,0,0,1]],[7,["_euler"],26,[1,0,0,0]]]],28]],[14,0,{},1,[48,null,"d2UqD5yQJToKpE5+BG3H4A",-163,[27,"29AD7ZIHRAlZptjj3ktfen",[[13,"摊位导图928",["_name"],28],[7,["_lpos"],28,[1,18,5,54]],[7,["_lscale"],28,[1,0.9,0.9,0.9]],[7,["_lrot"],28,[3,0,0,0,1]],[7,["_euler"],28,[1,0,0,0]],[12,["_lpos"],[8,["7eYSMyxbNeOaEey6RNx3ky"]],[1,-26.066,-3.834,76.139]],[12,["_lpos"],[8,["0dsuf+9NxXXrVmixGp9ba3"]],[1,24.669,0.043,65.206]],[12,["_lpos"],[8,["6ac8YEawpQJIuhVtCiFvvE"]],[1,-26.954,0,24.579]],[12,["_lpos"],[8,["d21/LDcAReo5pbC/XEE3uq"]],[1,11.502,0,0.974]],[12,["_lpos"],[8,["fa8Vcx6D9RoIE1cq3U+681"]],[1,-23.914,0,-26.777]],[12,["_lpos"],[8,["6c/s2Wl0RVCYn/GLq1PZUe"]],[1,27.549,0,-46.698]],[12,["_lpos"],[8,["48C8G5LoVW1JZRPPhIkJvl"]],[1,-21.404,0,-83.276]]]]]],[14,0,{},1,[48,null,"12rbijDhJc34X5MUk8RU0s",-164,[27,"fe7FmXHxZO05kpHsY1T5zQ",[[13,"贝瑞甜心导图(2)",["_name"],29],[7,["_lpos"],29,[1,22,4,-66]],[7,["_lscale"],29,[1,1,1,1]],[7,["_lrot"],29,[3,0,0,0,1]],[7,["_euler"],29,[1,0,0,0]]]]]],[98,15,37,30],[73,"Camera",3,[-165],[1,0,0,1000]],[96,"Camera<CameraComponent>",0,1073741824,53,720,6,33554432,48,[4,4279174657]],[118,null,3,30,47,40,39],[60,"Directional Light","2cUWNGGwNKrJ8cB/kkdQAb",2,[[119,-166,[120]]],[1,36,121,301],[3,-0.3721106382530007,0.0893324258355871,-0.21566755401196305,0.898354549573703],[1,-45,0,-26.999]]],0,[0,0,1,0,-1,8,0,-2,11,0,-3,42,0,-4,5,0,-5,15,0,-6,17,0,-7,19,0,-8,21,0,-9,6,0,-10,43,0,-11,24,0,-12,44,0,-13,7,0,-14,45,0,-15,46,0,-1,31,0,-2,8,0,-3,41,0,-4,11,0,-5,42,0,-6,5,0,-7,15,0,-8,17,0,-9,19,0,-10,21,0,-11,6,0,-12,43,0,-13,24,0,-14,44,0,-15,7,0,-16,45,0,-17,46,0,19,31,0,20,50,0,-1,37,0,-2,30,0,-3,3,0,-5,51,0,-6,33,0,-7,34,0,-8,35,0,-9,36,0,0,3,0,21,49,0,0,3,0,0,3,0,-4,50,0,-1,48,0,-2,31,0,-3,39,0,-4,32,0,3,14,0,3,14,0,3,14,0,3,14,0,3,14,0,0,5,0,0,5,0,0,5,0,5,5,0,3,23,0,3,23,0,3,23,0,3,23,0,3,23,0,0,6,0,0,6,0,0,6,0,5,6,0,3,27,0,3,27,0,3,27,0,3,27,0,3,27,0,0,7,0,0,7,0,0,7,0,5,7,0,3,10,0,3,10,0,3,10,0,3,10,0,3,10,0,-1,41,0,5,8,0,3,12,0,3,12,0,3,12,0,3,12,0,3,12,0,0,11,0,0,11,0,5,11,0,3,16,0,3,16,0,3,16,0,3,16,0,3,16,0,0,15,0,0,15,0,5,15,0,3,18,0,3,18,0,3,18,0,3,18,0,3,18,0,0,17,0,0,17,0,5,17,0,3,20,0,3,20,0,3,20,0,3,20,0,3,20,0,0,19,0,0,19,0,5,19,0,3,22,0,3,22,0,3,22,0,3,22,0,3,22,0,0,21,0,0,21,0,5,21,0,3,25,0,3,25,0,3,25,0,3,25,0,3,25,0,0,24,0,0,24,0,5,24,0,0,30,0,3,38,0,3,38,0,3,38,0,5,31,0,0,32,0,-2,40,0,22,40,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,-2,47,0,0,39,0,5,41,0,5,42,0,5,43,0,5,44,0,5,45,0,5,46,0,-1,49,0,0,51,0,23,2,1,6,2,166],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50],[9,9,9,7,9,7,9,9,7,7,9,7,9,7,1,9,7,1,7,9,7,9,7,7,9,9,7,1,9,9,7,7,-1,1,7,-1,1,7,-1,1,7,-1,1,7,24,25,26,27],[206,207,208,2,209,2,210,211,2,2,212,2,213,2,23,214,2,24,2,215,2,216,2,2,217,218,2,25,219,220,2,2,9,10,2,9,10,2,9,10,2,9,10,2,221,222,223,224]],[[[16],[38,"地面",[[[36,"Cinema_4D_编辑器",-3,[0,"efMVjh/S5cpKGekfJ0pV2v",-2,0],[1,27.436763763427734,12.990663528442383,30.9869384765625],[3,-0.15606123619741927,0.9106032491976133,-0.06464267692231652,0.3771842221350199],[1,-5.27214871792338e-7,134.99999922474493,-19.45000065527169]],-4],4,1],[0,"521k5McpNf8YoETcIfdphS",-1,0]],[5,"地面",1,[[4,-5,[1,"cfWkrYRGpWC7/hv4r74suf"],[0],[2],1]],[0,"c5OD+K6phW962alRRFvRbX",1,0]]],0,[0,5,1,0,5,1,0,6,1,0,-2,2,0,0,2,0,8,1,5],[0,0],[-1,1],[225,226]],[[[3,".bin",4070216393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.7306160926818848,0,-6.688170909881592],"maxPosition",8,[1,2.7306160926818848,0,6.688170909881592]]],-1],0,0,[],[],[]],[[[6,"材质.8",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[227,0]],[[[3,".bin",3598911902,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":123648,"length":15336,"count":7668,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":123648,"count":2576,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,7.244428634643555,2.936859607696533,4.0061492919921875],"maxPosition",8,[1,16.385295867919922,15.116188049316406,4.408276081085205]]],-1],0,0,[],[],[]],[[[6,"材质.13",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[228,0]],[[[3,".bin",1385537101,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":380160,"length":53304,"count":26652,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":380160,"count":7920,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-14.404315948486328,4.373785495758057,4.926000595092773],"maxPosition",8,[1,7.738533020019531,6.017327785491943,5.271336078643799]]],-1],0,0,[],[],[]],[[[3,".bin",4059146670,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":79488,"length":9744,"count":4872,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":79488,"count":1656,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-32.72224426269531,-1.5910753011703491,2.132254123687744],"maxPosition",8,[1,-19.373743057250977,10.62362003326416,2.5343809127807617]]],-1],0,0,[],[],[]],[[[6,"材质",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.11764705882352944,0.23137254901960808,0.4745098039215686],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[16],[17,"门头923修改ok",[-2],[0,"d8oA8I1bdTu5L9kFoPDQOa",-1,0]],[24,"门头",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19],[0,"87ldztendW3al2pEX31mtD",1,0],[1,-3.3328914642333984,5.195556640625,5.098668098449707],[3,0,0,0,-1]],[5,"门头-材质.14",2,[[4,-20,[1,"c3wULJ5d9Qya7XSU06ZbGk"],[0],[2],1]],[0,"fcSQ/ds45ZQ5pJR6eyIXIj",1,0]],[5,"门头-材质.2",2,[[4,-21,[1,"dbRZydGuhbaLX4avGblxKr"],[2],[2],3]],[0,"97F1LZE/ZRqYbQZyOLSNxc",1,0]],[5,"门头-材质",2,[[4,-22,[1,"9cHz8dLXxZv4A7k+v3O0N6"],[4],[2],5]],[0,"00KpMULcpWarL8nIcfjOGb",1,0]],[5,"门头-材质.5",2,[[4,-23,[1,"d1yHsRDQ1dhIveuBz6+E66"],[6],[2],7]],[0,"24kA/YT3pcrbZ2PL2GA+Zv",1,0]],[5,"门头-材质.4",2,[[4,-24,[1,"f6Zfycpe1dVotIvZRCzqjb"],[8],[2],9]],[0,"eakTXZyo1Xib6ugpHGSkdh",1,0]],[5,"门头-材质.3",2,[[4,-25,[1,"1dNm4mtrFYwI3A/e1GCooW"],[10],[2],11]],[0,"e85hcbkbtd1ZKUxFn/NBiw",1,0]],[5,"门头-材质.6",2,[[4,-26,[1,"f0KDRzpUNSZq/bELVfS5M3"],[12],[2],13]],[0,"c6bm9g/dpSMZ01kymRBgt/",1,0]],[5,"门头-材质.8",2,[[4,-27,[1,"6bt+r+e3dQR5u6L7XrX0Kt"],[14],[2],15]],[0,"00K5earQpakZFeSWo4rAMU",1,0]],[5,"门头-材质.7",2,[[4,-28,[1,"9bU714kkZT2LTA55dBkY9D"],[16],[2],17]],[0,"6cPNhXuqVVbLbLFcvbVoYP",1,0]],[5,"门头-材质.9",2,[[4,-29,[1,"3fzvYxQWFXB6qO4Hben8fg"],[18],[2],19]],[0,"ccVMPT5S1XSqWS4V2W87V0",1,0]],[5,"门头-材质.11",2,[[4,-30,[1,"705GEvg+hbu5sIGMZl6oHn"],[20],[2],21]],[0,"5938vlgxZW4aOmJhp4hCGr",1,0]],[5,"门头-材质.12",2,[[4,-31,[1,"fdn7l3UQlcIak6CfDMuQxw"],[22],[2],23]],[0,"886pF8XfZUs4LsxvaK6y3M",1,0]],[5,"门头-材质.13",2,[[4,-32,[1,"46aCKZjU5e77toAyjpJg36"],[24],[2],25]],[0,"e28vzwS8hbcIH4AsAb3D4G",1,0]],[5,"门头-材质.1",2,[[4,-33,[1,"5em3osJ+VdVKdUJf+RZSz/"],[26],[2],27]],[0,"faIbxmivFR5rp/dcV0qaSn",1,0]],[5,"门头-材质.10",2,[[4,-34,[1,"ecWbEMjCpbSoXiz14dICHo"],[28],[2],29]],[0,"13fcCVwfxW07i+yFabXlbq",1,0]],[5,"门头-材质.10(__autogen 15)",2,[[4,-35,[1,"bcp4L0MJdXl46Dz6uOTXyk"],[30],[2],31]],[0,"72TmSQB6heIaK37h8ggIyf",1,0]],[5,"门头-材质.15",2,[[4,-36,[1,"4eDLj2CitQu70m9fNsKIGL"],[32],[2],33]],[0,"4dHyZdZsZXmLXOd0q82Xz9",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,-16,18,0,-17,19,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,8,1,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,26,257,26,258,259,260]],[[[6,"材质.4",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[261,0]],[[[3,".bin",2943219989,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":63168,"length":7800,"count":3900,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":63168,"count":1316,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.5802925825119019,-7.596822261810303,3.052494525909424],"maxPosition",8,[1,44.28987121582031,14.638762474060059,3.4546215534210205]]],-1],0,0,[],[],[]],[[[3,".bin",1166748522,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":205824,"length":25416,"count":12708,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":205824,"count":4288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-14.42873764038086,7.02186393737793,2.5589513778686523],"maxPosition",8,[1,9.306428909301758,20.710308074951172,2.961078405380249]]],-1],0,0,[],[],[]],[[[3,".bin",2362177237,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19488,"length":1800,"count":900,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19488,"count":406,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,34.266090393066406,-11.87774658203125,4.223684787750244],"maxPosition",8,[1,44.2387580871582,-0.9673069715499878,4.62581205368042]]],-1],0,0,[],[],[]],[[[3,".bin",989703854,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32928,"length":4092,"count":2046,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":32928,"count":686,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-37.70969772338867,-13.722607612609863,2.194378614425659],"maxPosition",8,[1,-27.114971160888672,-3.66684627532959,2.194378614425659]]],-1],0,0,[],[],[]],[[[6,"材质.3",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":1,"roughness":1},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[262,0]],[[[6,"材质.5",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[263,0]],[[[3,".bin",3397285667,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":208416,"length":25656,"count":12828,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":208416,"count":4342,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-38.85390090942383,-34.19184875488281,1.7922515869140625],"maxPosition",8,[1,-22.083967208862305,-14.707306861877441,2.194378614425659]]],-1],0,0,[],[],[]],[[[3,".bin",642076831,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":1752,"count":876,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,23.344194412231445,-2.934152364730835,4.819835186004639],"maxPosition",8,[1,29.973848342895508,-0.0173047948628664,4.990766525268555]]],-1],0,0,[],[],[]],[[[3,".bin",796699472,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13872,"length":1686,"count":843,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":13872,"count":289,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-19.43666648864746,12.297161102294922,2.0413339138031006],"maxPosition",8,[1,-13.313425064086914,21.8609676361084,2.0413339138031006]]],-1],0,0,[],[],[]],[[[6,"材质.12",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[264,0]],[[[3,".bin",1329345075,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":210336,"length":25524,"count":12762,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":210336,"count":4382,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-37.70969772338867,-13.722607612609863,1.7922515869140625],"maxPosition",8,[1,-25.670387268066406,-3.66684627532959,2.194378614425659]]],-1],0,0,[],[],[]],[[[6,"材质.6",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[265,0]],[[[3,".bin",3148217910,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":103200,"length":12672,"count":6336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":103200,"count":2150,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.06058931350708,4.416341781616211,2.046962261199951],"maxPosition",8,[1,21.7935791015625,24.94918441772461,2.449089288711548]]],-1],0,0,[],[],[]],[[[6,"材质.1",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[266,0]],[[[6,"材质.10",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[267,0]],[[[6,"材质.15",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,1,1,1],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2685417154,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":54720,"length":6648,"count":3324,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":54720,"count":1140,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-42.53831481933594,-35.139556884765625,-16.267602920532227],"maxPosition",8,[1,49.204097747802734,15.168736457824707,1.688513159751892]]],-1],0,0,[],[],[]],[[[3,".bin",935381591,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":103200,"length":12768,"count":6384,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":103200,"count":2150,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,33.20731735229492,-1.8744621276855469,3.6407268047332764],"maxPosition",8,[1,43.167755126953125,7.173792839050293,4.042853832244873]]],-1],0,0,[],[],[]],[[[3,".bin",3799447281,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24864,"length":3072,"count":1536,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":24864,"count":518,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,26.18683624267578,-35.34029769897461,5.691076755523682],"maxPosition",8,[1,46.87522506713867,-4.856562614440918,6.0702667236328125]]],-1],0,0,[],[],[]],[[[3,".bin",3279745339,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17760,"length":2208,"count":1104,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17760,"count":370,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-42.53831481933594,-35.139556884765625,1.688513159751892],"maxPosition",8,[1,49.204097747802734,15.168736457824707,1.688513159751892]]],-1],0,0,[],[],[]],[[[6,"材质.7",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[268,0]],[[[6,"材质.2",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[269,0]],[[[6,"材质.14",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[270,0]],[[[3,".bin",3656935155,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":105888,"length":12960,"count":6480,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":105888,"count":2206,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,22.137964248657227,-2.4005954265594482,5.078863620758057],"maxPosition",8,[1,31.857152938842773,3.598299026489258,5.326140403747559]]],-1],0,0,[],[],[]],[[[6,"材质.9",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[271,0]],[[[6,"材质.11",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[272,0]],[[[35,"PlayerName"],[43,"PlayerName",33554432,[-8],[[40,-2,[1,"43DFd++6RK3LH0AcdoB2E2"],[5,200,75.8],[0,0.5,0]],[121,"啊啊是真的吗那太好了呀",26,26,30,3,-3,[1,"48Mnc+Iz9Au4RcH5jDQyNE"]],[123,4,-4,[1,"c96E8rqntECr6r3cLWc8R8"],[4,1577058304]],[124,-7,[1,"d7aBQhd5pMrZVgPcxbOCrD"],-6,-5]],[0,"edF4ZHB/lA1J3T6IWjMHUL",-1,0],[1,-134.979,-2.077,0]],[61,"chatMsg",false,33554432,1,[-11,-12],[[40,-9,[1,"48F+bDNBRNsqVyv7XtI4Ia"],[5,240,70.4],[0,0.5,0]],[125,1,2,10,10,-10,[1,"5aD8dVHkNLsIG5q0o/IndH"]]],[0,"af3Xb6xs9IFYpBFN/Zn8x6",1,0],[1,0,118.366,0]],[62,"bg",33554432,[[28,-13,[1,"f4g0kVJwZE4rsQqHdnajwP"],[5,240,70.4]],[81,1,0,-14,[1,"8f2bnORMtLEL+3uXplJCMl"],[4,3036676095],0],[78,45,240,70.4,1,-15,[1,"91vm5suEtKsZIjr3QRtAy8"],2]],[0,"c8kLF+R9NNHLzXqX+7zMg+",1,0],[1,0,-25.200000000000003,0]],[44,"bg",33554432,2,[3],[[28,-16,[1,"5fTf5xC29I+pwdAMYPDO4d"],[5,0,0]]],[0,"64LzPqnABOU5rnqJLw9aSx",1,0],[1,0,25.200000000000003,0]],[69,"Label",33554432,2,[[[40,-17,[1,"489mi+E6dP3bN1Gk5ImP+k"],[5,220,50.4],[0,0.5,0]],-18],4,1],[0,"93TdRkhKRIZ41bKV/YKga2",1,0],[1,0,-25.199999999999996,0]],[122,"aa",26,26,3,5,[1,"7d+mFsv11G4bsjGtuFrdjR"],[4,4278190080]]],0,[0,5,1,0,0,1,0,0,1,0,0,1,0,28,6,0,29,2,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,4,0,-2,5,0,0,3,0,0,3,0,0,3,0,0,4,0,0,5,0,-2,6,0,8,1,3,6,4,18],[0],[10],[273]],[[[3,".bin",3674893641,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14736,"length":1830,"count":915,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14736,"count":307,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,7.4743828773498535,6.878684997558594,-5.22712516784668],"maxPosition",8,[1,13.329887390136719,10.019027709960938,-5.054309368133545]]],-1],0,0,[],[],[]],[[[3,".bin",4060246784,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":103200,"length":12672,"count":6336,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":103200,"count":2150,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,6.224112510681152,-7.0980706214904785,-5.168036460876465],"maxPosition",8,[1,14.352235794067383,0.9510318040847778,-4.978199005126953]]],-1],0,0,[],[],[]],[[[16],[17,"舞台导图",[-2],[0,"9dHhHxsoxXHIg3TyDhd6mK",-1,0]],[18,"舞台",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17],[0,"79ailSB0VVCKXmN4XvJzwS",1,0]],[5,"舞台",2,[[50,[null],-18,[1,"801ou4nmBaypb1rJDi08fD"],[2],0]],[0,"6cBCns5/NRC5nDYsz4wHuq",1,0]],[5,"舞台-材质.10",2,[[4,-19,[1,"b6ClTmF6he17k2TlB++jow"],[1],[2],2]],[0,"34ngKD4PRRAZCfFpp3IEz5",1,0]],[5,"舞台-材质.10(__autogen 2)",2,[[4,-20,[1,"00dl/5HwNUV5xqn+MrIxHT"],[3],[2],4]],[0,"8aCrJ55sNdPZkY21JxjHiO",1,0]],[5,"舞台-材质.1",2,[[4,-21,[1,"34X4XpcudSPoc5o3nG2YEF"],[5],[2],6]],[0,"b7fRa5NDBfYKHaVGfol1dP",1,0]],[5,"舞台-材质",2,[[4,-22,[1,"b6VZ0eUYleLbB1DJzH8ZV3"],[7],[2],8]],[0,"64O0eusPRVnaD6C8dPUJDT",1,0]],[5,"舞台-材质.4",2,[[4,-23,[1,"90QVuNDxhVJaXpdYhPzm3x"],[9],[2],10]],[0,"9ehdh2Qh5Vf7JHuSiKi6XT",1,0]],[5,"舞台-材质.3",2,[[4,-24,[1,"82lMa+A2pT4bQKZKTvzQcl"],[11],[2],12]],[0,"617UQOiMBSc4k7xR1NWiYr",1,0]],[5,"舞台-材质.7",2,[[4,-25,[1,"69NsJHnQxXWrFoUJEf4rIi"],[13],[2],14]],[0,"020bp6oDheOpC7cmX0Wpxu",1,0]],[5,"舞台-材质.2",2,[[4,-26,[1,"4029r7Js1Ux6kJOSIQWk+S"],[15],[2],16]],[0,"b2tA4STn5Y64d1EDsJCX3z",1,0]],[5,"舞台-材质.3(__autogen 9)",2,[[4,-27,[1,"4fXxZxXjVQxIl/a+Bzl8lP"],[17],[2],18]],[0,"64aouj9DBfDZVU8DjwKjwA",1,0]],[5,"舞台-材质.3(__autogen 10)",2,[[4,-28,[1,"1aLbsS2Z5R/6bOThdRZV/7"],[19],[2],20]],[0,"7d6E8B91Ff8bwuNzNWDlOA",1,0]],[5,"舞台-材质.1(__autogen 11)",2,[[4,-29,[1,"b77yWxw59Ym7QPBeXIpIPW"],[21],[2],22]],[0,"7787cOY1VV7bSATkY59Yj2",1,0]],[5,"舞台-材质.9",2,[[4,-30,[1,"2eaU6pe69d+JEPUG6IOqks"],[23],[2],24]],[0,"b3tiYLHhpQ/bYXLseH4MMB",1,0]],[5,"舞台-材质.12",2,[[4,-31,[1,"bewBrfDDZbgINcVvpTW/eL"],[25],[2],26]],[0,"31kyRSwg5Uo5M8RaJcnzVo",1,0]],[5,"舞台-材质.13",2,[[4,-32,[1,"48skqwEwhVCLoh/V8p71HI"],[27],[2],28]],[0,"b1cEAXiiVf/INl98it65Ha",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,8,1,32],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[274,27,275,27,276,28,277,278,279,280,281,282,283,284,285,286,24,29,287,29,288,28,289,290,291,292,293,294,295]],[[[3,".bin",3877249872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19392,"length":2448,"count":1224,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19392,"count":404,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-11.54324722290039,6.591589450836182,-4.113452911376953],"maxPosition",8,[1,-8.005928993225098,9.82847785949707,-4.099438667297363]]],-1],0,0,[],[],[]],[[[3,".bin",1500500367,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20064,"length":2520,"count":1260,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":20064,"count":418,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.763671636581421,6.301133632659912,-4.533168315887451],"maxPosition",8,[1,3.4882652759552,10.233877182006836,-4.508398532867432]]],-1],0,0,[],[],[]],[[[3,".bin",106846758,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13872,"length":1686,"count":843,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":13872,"count":289,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.121650218963623,4.59413480758667,-4.268288612365723],"maxPosition",8,[1,-4.8182549476623535,6.629905700683594,-4.263124465942383]]],-1],0,0,[],[],[]],[[[6,"材质.10",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[296,0]],[[[6,"材质.3",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.3},"albedoScale",8,[1,0.02,0.02,0.02],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.9",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[297,0]],[[[6,"材质.4",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[298,0]],[[[3,".bin",2805510389,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":51264,"length":6420,"count":3210,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":51264,"count":1068,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-14.532885551452637,-6.446794509887695,-4.117668628692627],"maxPosition",8,[1,-4.053308010101318,5.729245185852051,-4.0761494636535645]]],-1],0,0,[],[],[]],[[[3,".bin",2678113389,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44688,"length":5514,"count":2757,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":44688,"count":931,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,7.466767311096191,6.876575946807861,-5.489006042480469],"maxPosition",8,[1,13.329887390136719,10.019027709960938,-5.054309368133545]]],-1],0,0,[],[],[]],[[[6,"材质.13",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[299,0]],[[[3,".bin",3889750789,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":242640,"length":50688,"count":25344,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":242640,"count":5055,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-20.5,-10.233877182006836,-20.5],"maxPosition",8,[1,20.5,-6.976981163024902,20.5]]],-1],0,0,[],[],[]],[[[3,".bin",848472819,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":156672,"length":9792,"count":4896,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":156672,"count":3264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-12.55593490600586,-6.978592395782471,-9.877155303955078],"maxPosition",8,[1,11.61972427368164,9.181407928466797,-5.622101783752441]]],-1],0,0,[],[],[]],[[[3,".bin",1575802540,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25920,"length":3240,"count":1620,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25920,"count":540,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,5.34433650970459,3.5954108238220215,-4.127154350280762],"maxPosition",8,[1,10.036421775817871,6.491490840911865,-4.108564853668213]]],-1],0,0,[],[],[]],[[[3,".bin",2991199258,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":50736,"length":6366,"count":3183,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":50736,"count":1057,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.160017013549805,-0.41488125920295715,-5.007055282592773],"maxPosition",8,[1,5.1443586349487305,4.951140880584717,-4.970191955566406]]],-1],0,0,[],[],[]],[[[6,"材质.7",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[300,0]],[[[6,"材质.12",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[301,0]],[[[6,"材质.2",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.6000000000000001,0.6780487804878048,0.8],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.3",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[302,0]],[[[3,".bin",1446842191,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3552,"length":432,"count":216,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3552,"count":74,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,5.926021099090576,3.3378260135650635,-4.285459518432617],"maxPosition",8,[1,9.1265869140625,4.745989799499512,-4.2727789878845215]]],-1],0,0,[],[],[]],[[[6,"材质",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.02,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[303,0]],[[[6,"材质.1",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[304,0]],[[[3,".bin",1861656092,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":176976,"length":34044,"count":17022,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":176976,"count":3687,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1933571100234985,-6.913020133972168,8.690053939819336],"maxPosition",8,[1,-0.41192126274108887,-1.8145766258239746,9.445963859558105]]],-1],0,0,[],[],[]],[[[3,".bin",1638384749,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":243264,"length":29616,"count":14808,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":243264,"count":5068,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.07111012190580368,-6.765933036804199,-4.403438568115234],"maxPosition",8,[1,4.649020195007324,-2.823962926864624,-4.227103233337402]]],-1],0,0,[],[],[]],[[[3,".bin",1100836253,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":524592,"length":64158,"count":32079,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":524592,"count":10929,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-14.533881187438965,-6.446794509887695,-5.164692401885986],"maxPosition",8,[1,10.036421775817871,10.233877182006836,-4.0761494636535645]]],-1],0,0,[],[],[]],[[[101,"default-material",[{}],[{}]]],0,0,[0],[2],[0]],[[[3,".bin",3034413464,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.015861298888921738,2.586615613021489e-17,-0.004109860397875309],"maxPosition",8,[1,-0.0034624289255589247,0.0018279491923749447,-0.002034588251262903]]],-1],0,0,[],[],[]],[[[6,"班子",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4292920182],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"堡垒3-4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[305,1]],[[[3,".bin",1471353598,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":408,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":624,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":840,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":1056,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":1272,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":216,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":432,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":648,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":864,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1080,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013240312226116657,-0.006620156113058329,-0.013240312226116657],"maxPosition",8,[1,0.013240312226116657,0.006620156113058329,0.013240312226116657]]],-1],0,0,[],[],[]],[[[6,"堡垒2-2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[306,1]],[[[3,".bin",2300283085,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.035171881318092346,2.586615613021489e-17,-0.012762689962983131],"maxPosition",8,[1,-0.019079729914665222,0.0018279491923749447,-0.005059561226516962]]],-1],0,0,[],[],[]],[[[3,".bin",1330285002,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2880,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2880,"count":60,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.03482013940811157,2.586615613021489e-17,-0.005059561226516962],"maxPosition",8,[1,-0.029807832092046738,0.0018279491923749447,0.0013772996608167887]]],-1],0,0,[],[],[]],[[[6,"堡垒2-1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[307,1]],[[[3,".bin",717917955,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":3792,"count":948,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05286445468664169,2.586615613021489e-17,-0.012481296434998512],"maxPosition",8,[1,-0.036965761333703995,0.0018279491923749447,0.003593267872929573]]],-1],0,0,[],[],[]],[[[6,"堡垒1-3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[308,1]],[[[6,"堡垒3-2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[309,1]],[[[6,"堡垒灰",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4293125090],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"文字",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4294967295],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"墙面",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4293777574],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"屋顶",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4294171547],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[6,"堡垒3-3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[310,1]],[[[3,".bin",3786786198,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16608,"length":2592,"count":648,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16608,"count":346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.01743098720908165,2.586615613021489e-17,-0.012797863222658634],"maxPosition",8,[1,0.033892467617988586,0.0018279491923749447,0.0036987904459238052]]],-1],0,0,[],[],[]],[[[6,"堡垒1-2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[311,1]],[[[6,"堡垒1-4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[312,1]],[[[6,"玻璃",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":512},"mainColor",8,[4,4290758547],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",2700219028,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":48,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.08204682171344757,0.02192135713994503,-0.10990224033594131],"maxPosition",8,[1,0.07753484696149826,0.034668952226638794,0.10990224033594131]]],-1],0,0,[],[],[]],[[[6,"堡垒2-4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[313,1]],[[[3,".bin",2601369530,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":408,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":624,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":840,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":1056,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":1272,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":216,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":432,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":648,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":864,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1080,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013240312226116657,-0.006620156113058329,-0.013240312226116657],"maxPosition",8,[1,0.013240312226116657,0.006620156113058329,0.013240312226116657]]],-1],0,0,[],[],[]],[[[3,".bin",3280510545,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":168,"count":42,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":28,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.09565512835979462,-0.08743134886026382,-0.11699304729700089],"maxPosition",8,[1,0.09010995924472809,-0.08345189690589905,0.11699274927377701]]],-1],0,0,[],[],[]],[[[3,".bin",675229626,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.017391374334692955,2.586615613021489e-17,0.0009552103583700955],"maxPosition",8,[1,-0.001686137169599533,0.0018279491923749447,0.0030304824467748404]]],-1],0,0,[],[],[]],[[[3,".bin",1621058591,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":408,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":624,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":840,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":1056,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":1272,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":216,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":432,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":648,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":864,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1080,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013240312226116657,-0.013240312226116657,-0.013240312226116657],"maxPosition",8,[1,0.013240312226116657,0.013240312226116657,0.013240312226116657]]],-1],0,0,[],[],[]],[[[6,"堡垒3-1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[314,1]],[[[3,".bin",1505646015,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23040,"length":3792,"count":948,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23040,"count":480,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.034894928336143494,2.586615613021489e-17,-0.011971271596848965],"maxPosition",8,[1,0.051444344222545624,0.0018279491923749447,0.0038043127860873938]]],-1],0,0,[],[],[]],[[[16],[38,"堡垒926",[[[36,"Cinema_4D_编辑器",-3,[0,"2auMoEkoZd7J5nHuCFjNSJ",-2,0],[1,0.21265846490859985,0.1953626275062561,0.493394136428833],[3,-0.09478134078079355,0.8150061507576041,-0.06603489928515176,0.567821154716402],[1,-1.5136562384903908e-7,110.26954371843583,-13.266858053482153]],-4],4,1],[0,"beAHQUOGBQnYSx0nP3KbYy",-1,0]],[17,"_______1_1",[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15],[0,"00m7TB3uVd8KCY+Mm3xu5v",1,0]],[70,"房子",[[[22,"房子_2",-16,[0,"a74bmIA8lbMq1AeOYIA8XB",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]],-17,-18,-19,-20,-21,-22],4,1,1,1,1,1,1],[0,"6bnkJZHYhbh6fLDGa26mRe",1,0],[1,-0.08211886137723923,0.022078249603509903,-0.0869021788239479],[3,0,-0.7071067811865476,0,0.7071067811865476],[1,0,-90.00000000000003,0]],[23,"爱尔兰展",1,[-23,-24,-25,3],[0,"0cRhfVGKJZp6qrx4xvv9wg",1,0],[1,0.020064011216163635,0.03249720484018326,0.06613858789205551]],[10,"堡垒",4,[-26,-27,-28],[0,"9bolijcmJY27wsAYVq98sY",1,0],[1,0.12489203363656998,-0.001328138867393136,0.05680568888783455],[3,0,0.3826834370613369,0,0.9238795305660377],[1,0,45.00000058248967,0]],[10,"Model",4,[2],[0,"33sV5sgGZdPJvwPOu98Cbl",1,0],[1,-0.014984548091888428,0.09410931169986725,-0.0839337632060051],[3,0.7071067811865476,0,0,0.7071067811865476],[1,90.00000000000003,0,0]],[5,"Mesh11",2,[[4,-29,[1,"ebN9vvQGRc/Z3excZsJxfG"],[0],[2],1]],[0,"6fSxNeOp1TO4ioktwrhQON",1,0]],[5,"Mesh10",2,[[4,-30,[1,"15yOSkRnhdnJxSE0i+Gxtv"],[2],[2],3]],[0,"2f0pU3h95YK4mTf9eh0/cy",1,0]],[5,"Mesh09",2,[[4,-31,[1,"8bWcT8a7FaP4PReoXL2sD3"],[4],[2],5]],[0,"0dMaDPR3ta95hheK/P1lmC",1,0]],[5,"Mesh08",2,[[4,-32,[1,"bauY7w23pT3rQR17AGY4si"],[6],[2],7]],[0,"1ftu7HCZ5dZ5KmQYTLaYio",1,0]],[5,"Mesh07",2,[[4,-33,[1,"d5RTQPtBdYJY8xh4WrQIgb"],[8],[2],9]],[0,"18opeOyr1do4y/NQR0snaT",1,0]],[5,"Mesh06",2,[[4,-34,[1,"f6kV+r1BdaF6w8WyUBq4Za"],[10],[2],11]],[0,"2aeGeWtwZa6p6iAiMb28CM",1,0]],[5,"Mesh05",2,[[4,-35,[1,"bbUBcekz5bULR7Qk1cTig7"],[12],[2],13]],[0,"60xfogZc5ZTIXYRmaqwKSH",1,0]],[5,"Mesh04",2,[[4,-36,[1,"37PhgjZBVcbZQmLZNDCfSE"],[14],[2],15]],[0,"11InINophRR62zMkWJdaBx",1,0]],[5,"Mesh03",2,[[4,-37,[1,"d45/FNLfpd562jvR/g2Oyp"],[16],[2],17]],[0,"deiDTYScZfeKWwWaKi4PDu",1,0]],[5,"Mesh02",2,[[4,-38,[1,"c7xkLNBflcwYc10MCv1edk"],[18],[2],19]],[0,"a2wX3KK/VZErULwGmm/fmL",1,0]],[5,"Mesh01",2,[[4,-39,[1,"cfRnkv/cRWtLFgSLm9AgXG"],[20],[2],21]],[0,"d5Xz2u0Pha6KaHemhS2+PH",1,0]],[11,"1_5",5,[[41,-40,[1,"f8MfhXtiBaw79gLsbvpohC"],[[22,23,24,25,26,null],6,6,6,6,6,0],[2],27]],[0,"dffBjxvRFeRIqJWVPamSrY",1,0],[1,0.004649179056286812,0.019873077049851418,-7.105427198782324e-17]],[63,"1_4",5,[[41,-41,[1,"48zzdaGLFYnIB9sRytKejk"],[[28,29,30,31,32,null],6,6,6,6,6,0],[2],33]],[0,"9fCm/1h89ZpoRWvz+yuJnm",1,0],[1,0.002988882130011916,-0.0007612185436300933,0.003417434636503458],[3,0,-0.12986368053705433,0,0.9915318575201554],[1,0,-14.923430020050539,0]],[11,"1_3",5,[[41,-42,[1,"9a07OKdaxZQKDi9lN4syKA"],[[34,35,36,37,38,null],6,6,6,6,6,0],[2],39]],[0,"81SBIU1XdaWLYRczYLNObc",1,0],[1,0,-0.02166927233338356,0]],[11,"文字",4,[[4,-43,[1,"79u8nXv7tbnosXEe1Y4gbH"],[40],[2],41]],[0,"23mPj0X7FdfL4zsZODaLb8",1,0],[1,-0.049029916524887085,-0.02075011096894741,-0.045664768666028976]],[11,"窗框",3,[[4,-44,[1,"c65jfcYeNcA6Ug/+PVrJix"],[42],[2],43]],[0,"00tX5W2wtXzq9sfugnYd1t",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]],[11,"门框",3,[[4,-45,[1,"c2DygWt0NU24FSjPkX55yQ"],[44],[2],45]],[0,"a7VnzlmEBZ5ZhfkTp1Q5RG",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]],[11,"蓝色站姿",3,[[4,-46,[1,"ef/oy0hBFaj5ag7B5DDKxu"],[46],[2],47]],[0,"4anxcLwqVZeLMqvLDd0qpq",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]],[64,"石板",3,[[4,-47,[1,"90nIxkQcRc2KKEo7WLQpql"],[48],[2],49]],[0,"cfodUQrARVL4Zi4HxskXjZ",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035],[1,1,1.0035746097564697,1]],[11,"屋顶",3,[[4,-48,[1,"e7nl0r5CpTlpP97visKWak"],[50],[2],51]],[0,"d5Z77dFtlX8ohxRd0Mq46t",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]],[11,"墙面",3,[[4,-49,[1,"2aK6Ueh1JT6IwJYidcLk9R"],[52,53],[2],54]],[0,"a824hJp99VUqmvAkE1SgRe",1,0],[1,-0.08051367849111557,0.03305456042289734,-0.06870923936367035]]],0,[0,5,1,0,5,1,0,6,1,0,-2,4,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,12,0,-7,13,0,-8,14,0,-9,15,0,-10,16,0,-11,17,0,6,3,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,-6,26,0,-7,27,0,-1,6,0,-2,5,0,-3,21,0,-1,18,0,-2,19,0,-3,20,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,8,1,2,6,6,3,6,4,49],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,-4,-5,1,-1,-2,-3,-4,-5,1,-1,-2,-3,-4,-5,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1],[5,315,5,316,5,317,5,318,5,319,5,320,5,321,5,322,5,323,5,324,5,325,30,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,30,341,5,342,14,343,14,344,14,345,346,347,348,349,350,351,352]],[[[3,".bin",2815832448,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1127088,"length":193092,"count":48273,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1127088,"count":23481,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.08886245638132095,-0.009964833036065102,-0.004525713622570038],"maxPosition",8,[1,0.08886245638132095,0.009964833036065102,0.004525713622570038]]],-1],0,0,[],[],[]],[[[3,".bin",504641103,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":408,"count":102,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3480,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3096,"length":384,"count":8,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.07414083182811737,-0.08345190435647964,-0.10191041231155396],"maxPosition",8,[1,0.06962883472442627,0.021921366453170776,0.10191041231155396]]],-1],0,0,[],[],[]],[[[6,"堡垒1-1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[353,1]],[[[3,".bin",365072085,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2016,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2016,"count":42,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.02446136809885502,2.586615613021489e-17,-0.005094734951853752],"maxPosition",8,[1,-0.019484233111143112,0.0018279491923749447,0.001289364299736917]]],-1],0,0,[],[],[]],[[[6,"堡垒蓝",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4287841038],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",1281622474,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14112,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14112,"count":294,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00022641182295046747,2.586615613021489e-17,-0.012903384864330292],"maxPosition",8,[1,0.016446111723780632,0.0018279491923749447,0.003663616254925728]]],-1],0,0,[],[],[]],[[[6,"石板",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4292923558],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[2],[1]],[[[3,".bin",440268472,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.016881350427865982,2.586615613021489e-17,-0.012745101936161518],"maxPosition",8,[1,-0.0021082262974232435,0.0018279491923749447,-0.006906201131641865]]],-1],0,0,[],[],[]],[[[3,".bin",573924550,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4320,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4320,"count":90,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.031056512147188187,2.586615613021489e-17,-0.007029310800135136],"maxPosition",8,[1,-0.0258155707269907,0.0018279491923749447,0.0036460289265960455]]],-1],0,0,[],[],[]],[[[3,".bin",630584168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.058848682790994644,-0.08345190435647964,-0.0905018001794815],"maxPosition",8,[1,0.059841595590114594,-0.014507757499814034,-0.0503230094909668]]],-1],0,0,[],[],[]],[[[3,".bin",1674391851,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":24,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0.05884868651628494,-0.07689524441957474,-0.041882775723934174],"maxPosition",8,[1,0.06108924373984337,-0.013798151165246964,0.09554371982812881]]],-1],0,0,[],[],[]],[[[3,".bin",2894515721,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.07753483951091766,0.021921368315815926,-0.06440333276987076],"maxPosition",8,[1,0.08204682171344757,0.06385299563407898,0.07059071213006973]]],-1],0,0,[],[],[]],[[[6,"堡垒2-3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":32},"mainColor",8,[4,4291611852],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[354,1]],[[[6,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0,"roughness":0.5},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[355,0]],[[[3,".bin",739993320,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22512,"length":2616,"count":1308,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22512,"count":469,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-190.71461486816406,-26.5,-456.3112487792969],"maxPosition",8,[1,190.71461486816406,26.5,456.3112487792969]]],-1],0,0,[],[],[]],[[[16],[17,"商场9",[-2],[0,"38aIBxDElT67GV2eR2ejf4",-1,0]],[19,"挤压",1,[[4,-3,[1,"ab26M47OJRVrL9RUxLXNM3"],[0],[2],1]],[0,"0epdlQMLdX6Ib4jUGcKK+3",1,0],[1,0,-0.43773695826530457,0],[3,0,0,0,-1]]],0,[0,5,1,0,-1,2,0,0,2,0,8,1,3],[0,0],[-1,1],[356,25]],[[[3,".bin",3117799770,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.977666854858398,-2.5591683387756348,1.0044055024542933e-13],"maxPosition",8,[1,-1.9189531803131104,-1.4320605993270874,0.17062745988368988]]],-1],0,0,[],[],[]],[[[6,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.11,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[357,0]],[[[3,".bin",3976945138,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.3077590465545654,-4.193729877471924,1.0055496745594444e-13],"maxPosition",8,[1,7.297582626342773,-2.276505470275879,0.17062745988368988]]],-1],0,0,[],[],[]],[[[6,"材质.1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.09,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[358,0]],[[[3,".bin",2047718660,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2304,"length":168,"count":84,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2304,"count":48,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-7.297582626342773,-0.5501319766044617,1.0040411427617024e-13],"maxPosition",8,[1,-1.3553473949432373,2.461632013320923,0.17062745988368988]]],-1],0,0,[],[],[]],[[[3,".bin",3769139293,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":511200,"length":42240,"count":21120,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":511200,"count":10650,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.264328956604004,-4.654468059539795,1.4152222416966703e-13],"maxPosition",8,[1,6.264328956604004,4.654468059539795,0.034125491976737976]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.2823529411764706,0.6196078431372549,0.8705882352941177],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",1072435194,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.4583126902580261,0.5466780662536621,1.0052591761398541e-13],"maxPosition",8,[1,2.742934465408325,5.427978515625,0.17062745988368988]]],-1],0,0,[],[],[]],[[[3,".bin",1296335308,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.7254561185836792,0.7845461964607239,1.0049162294401698e-13],"maxPosition",8,[1,-0.3083741068840027,4.138719081878662,0.17062745988368988]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.8823529411764706,0.3294117647058823,0.4627450980392157],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2036984907,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20832,"length":2520,"count":1260,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":20832,"count":434,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.479374408721924,-5.223415374755859,-0.8999999761581421],"maxPosition",8,[1,5.479852199554443,5.222970962524414,6.1817216655876e-14]]],-1],0,0,[],[],[]],[[[16],[17,"置物架",[-2],[0,"db/M0FVFBTrI6TRKRd7wzm",-1,0]],[31,"挤压",[-3,-4,-5,-6,-7,-8,-9],[0,"1bEs0UaTtTtrcv9gYlVSxP",1,0],[1,-0.9665194153785706,2.481046676635742,0.00971597246825695],[3,0,0,0,-1]],[18,"置物架",1,[-10,-11,2,-12,-13,-14],[0,"f51i3SMyVYJZ5Jibryre/z",1,0]],[24,"挤压.2",3,[-15,-16],[0,"4aOhXZ/nhcyrPEkEdI2Szs",1,0],[1,-4.513630390167236,-4.4799346923828125,0.13058283925056458],[3,0,0,0,-1]],[5,"挤压.2-材质.1",4,[[4,-17,[1,"815ASMGNRblJ4EvSx7m28u"],[0],[2],1]],[0,"6cd2gLN+FaNJQTBqfUtVLR",1,0]],[5,"挤压.2-材质",4,[[4,-18,[1,"7dVxr3wEBce4xraxLG4od3"],[2],[2],3]],[0,"76OS9qKuFfrYCPN+9ekBZ4",1,0]],[19,"挤压.1",3,[[4,-19,[1,"cb2Rn/NdRf87vH7IPYhW1W"],[4],[2],5]],[0,"302vtNpt9fh4Uyw+HimHg8",1,0],[1,-0.6904110312461853,2.1750495433807373,0.1729627102613449],[3,0,0,0,-1]],[5,"挤压-材质.2",2,[[4,-20,[1,"b7xMD+C+VVB6t9OiZAPUPS"],[6],[2],7]],[0,"dba3bwGAVaz7/H+4EMPc94",1,0]],[5,"挤压-材质.2(__autogen 1)",2,[[4,-21,[1,"afxahCdnlRdaQZK4qXaPCM"],[8],[2],9]],[0,"2cQ638QEhUBY9hf6z19eN+",1,0]],[5,"挤压-材质.2(__autogen 2)",2,[[4,-22,[1,"82gbcdewRZ8Jg2kupQ4hKN"],[10],[2],11]],[0,"67Y5CVuGdU8orVFFgpKAVg",1,0]],[5,"挤压-材质.2(__autogen 3)",2,[[4,-23,[1,"8fjJwb3DNdyZVbVwdiUxM2"],[12],[2],13]],[0,"66IMqm+NNe36IqMY009KbG",1,0]],[5,"挤压-材质.2(__autogen 4)",2,[[4,-24,[1,"d9RqfB8m1TRrG1cEUeB9g7"],[14],[2],15]],[0,"ddKTBTgy5Uc78M+7ZdbGBH",1,0]],[5,"挤压-材质.2(__autogen 5)",2,[[4,-25,[1,"e18fZVKhdedaKZwHPz+R+5"],[16],[2],17]],[0,"7b65kVTt5bwJx2LugrpCum",1,0]],[5,"挤压-材质.2(__autogen 6)",2,[[4,-26,[1,"cf1HOAOVtZWIkNgM7AtaEN"],[18],[2],19]],[0,"f1oGivR51S464iu/gXkz7x",1,0]],[24,"挤压.7",3,[-27],[0,"4aW5+cPLxdCI5uufxdbD3j",1,0],[1,3.3177638053894043,3.9534502029418945,0.04030654579401016],[3,0,-2.220446049250313e-16,0,-1]],[5,"挤压.7",15,[[4,-28,[1,"34qQS8IxxctZFG6pGUAuim"],[20],[2],21]],[0,"9fAS8oKsZaR7ADbaw5iZju",1,0]],[10,"挤压.8",3,[-29],[0,"35FDXq+l9ZNYwyflszvTap",1,0],[1,3.0198895931243896,-3.654167652130127,0.20284336805343628],[3,2.915656186206741e-17,2.2012201497509664e-16,0.13130948113741162,0.991341424617888],[1,0,2.5444437451708134e-14,15.090537537174944]],[5,"挤压.8",17,[[4,-30,[1,"d2EqmxsS9fiLcYan66q8E0"],[22],[2],23]],[0,"b5sKtwXx1Z7KzTS/lt07ZC",1,0]],[24,"挤压.9",3,[-31],[0,"9173S/XzBdEIWNEEGDq9z1",1,0],[1,-0.1670922189950943,-0.4754442274570465,-0.5564114451408386],[3,0,-2.220446049250313e-16,0,-1]],[5,"挤压.9",19,[[4,-32,[1,"4eQtBRO69SFoaZ+pqA5mTE"],[24],[2],25]],[0,"c0Lie7rSFYqrnomqBFXJkq",1,0]]],0,[0,5,1,0,-1,3,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-1,4,0,-2,7,0,-4,15,0,-5,17,0,-6,19,0,-1,5,0,-2,6,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,-1,16,0,0,16,0,-1,18,0,0,18,0,-1,20,0,0,20,0,8,1,2,6,3,32],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[31,359,360,361,31,362,363,364,365,366,15,367,15,368,15,369,370,371,372,373,374,375,376,377,378,379]],[[[3,".bin",2779646496,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":120,"count":60,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.6341683864593506,-1.6070770025253296,1.0056009031120944e-13],"maxPosition",8,[1,6.0543904304504395,-0.7542580366134644,0.17062745988368988]]],-1],0,0,[],[],[]],[[[3,".bin",2245333961,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":120,"count":60,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.408975601196289,-5.427978515625,1.004337739818513e-13],"maxPosition",8,[1,-1.3315011262893677,-3.4590864181518555,0.17062745988368988]]],-1],0,0,[],[],[]],[[[3,".bin",1095436301,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37488,"length":4374,"count":2187,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":37488,"count":781,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8451273441314697,-1.2807815074920654,-0.05964573100209236],"maxPosition",8,[1,1.8451273441314697,1.2807815074920654,0.007278094533830881]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.8431372549019608,0.29803921568627434,0.1686274509803921],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质.3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.08,"roughness":0},"albedoScale",8,[1,0.8,0.8,0.8],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[4,2],[380,0]],[[[3,".bin",3745591186,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":59520,"length":7344,"count":3672,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":59520,"count":1240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.1411826610565186,-1.882672905921936,-0.05000000074505806],"maxPosition",8,[1,2.1683695316314697,1.9160215854644775,5.2104472808827546e-14]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.6431372549019608,0.7568627450980392,0.8156862745098039],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3246053480,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":151104,"length":18576,"count":9288,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":151104,"count":3148,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8388664722442627,-1.971107006072998,-0.05000000074505806],"maxPosition",8,[1,1.8441206216812134,1.978311538696289,-1.374553547156196e-13]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.8509803921568627,0.32941176470588235,0.580392156862745],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2838408677,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11664,"length":1458,"count":729,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":11664,"count":243,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8451273441314697,-1.2807815074920654,0.007278094533830881],"maxPosition",8,[1,1.8451273441314697,1.2807815074920654,0.007278094533830881]]],-1],0,0,[],[],[]],[[[6,"材质.2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.12,"roughness":0},"albedoScale",8,[1,0.18823529411764706,0.24705882352941158,0.6470588235294118],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[6,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0.5},"albedoScale",8,[1,0.3098039215686275,0.2980392156862745,0.6],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[16],[17,"入口坐凳",[-2],[0,"a1PbqU+fxUNKpDrwg0wHnH",-1,0]],[5,"入口坐凳",1,[[4,-3,[1,"8b/rMkN/BVnK85PxXv8n0+"],[0],[2],1]],[0,"c9NEZhwp5b46Z2i3QNIbbO",1,0]]],0,[0,5,1,0,-1,2,0,0,2,0,8,1,3],[0,0],[-1,1],[381,382]],[[[3,".bin",1148084235,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":994320,"length":218664,"count":109332,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":994320,"count":20715,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-7.214086055755615,-1.3009190559387207,-1.4421744346618652],"maxPosition",8,[1,7.559116363525391,1.3009190559387207,1.4525816440582275]]],-1],0,0,[],[],[]],[[[6,"材质",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0.5},"albedoScale",8,[1,0.9411764705882353,0.8666666666666667,0.7333333333333333],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",3853047673,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":96,"count":48,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-16.937652587890625,-0.8652527332305908,-9.569440841674805],"maxPosition",8,[1,16.923473358154297,8.155025482177734,9.56258773803711]]],-1],0,0,[],[],[]],[[[16],[17,"帐篷",[-2],[0,"4drfsD4WtfALtsxHQRiUGg",-1,0]],[18,"圆柱.8",1,[-3,-4],[0,"3csp2vWVFWzKNhjjfyZoJa",1,0]],[5,"圆柱.8",2,[[50,[null],-5,[1,"9cTPxaQlBS/7dr5KrPf3Zl"],[2],0]],[0,"8ayzYJXSte+4F9/yug7Bw4",1,0]],[5,"圆柱.8-材质",2,[[4,-6,[1,"f5tC5ecYNZLKWNQ8zjozcj"],[1],[2],2]],[0,"99twWnEV9TZq1wxTt+UuFc",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,8,1,6],[0,0,0],[1,-1,1],[383,384,385]],[[[3,".bin",713750018,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":71040,"length":8640,"count":4320,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":71040,"count":1480,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-28.472829818725586,-8.20671272277832,-20.641515731811523],"maxPosition",8,[1,28.472829818725586,8.20671272277832,20.641515731811523]]],-1],0,0,[],[],[]],[[[6,"mat_Player",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.6,"metallic":1},"mainColor",8,[4,4294166293]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[126,"dcc/imported-specular-glossiness",[{"hash":2269931406,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    }else {\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      } else if (pcf > 0.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      }else {\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      } else {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 finalColor = diffuse * s.lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_AUTODESK 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, specularFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  s.emissive = vec3(0.0);\n#if USE_EMISSIVE_MAP\n  s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n#endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    }else {\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      } else if (pcf > 0.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      }else {\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      } else {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 finalColor = diffuse * s.lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_AUTODESK 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, specularFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  s.emissive = vec3(0.0);\n#if USE_EMISSIVE_MAP\n  s.emissive = texture2D(emissiveMap, TEXTURE_UV).xyz;\n#endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":181,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,4]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2706003509,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]},{"name":"a_color","format":44,"location":15,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture(transparencyMap, TEXTURE_UV).a;\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).a;\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":96,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[6,"材质",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0.5},"albedoScale",8,[1,0.11764705882352941,0.11764705882352941,0.11764705882352941],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[16],[17,"栏杆(1)",[-2],[0,"54jci1gr9dwqVROTiMRZaH",-1,0]],[18,"栏杆",1,[-3,-4],[0,"e6pNk5xfVXJotpmyYeabT6",1,0]],[5,"栏杆-材质",2,[[4,-5,[1,"80a16uKnhZSbs3ucHyvw4U"],[0],[2],1]],[0,"75V1Vv92Rfnp59c54Fo1TA",1,0]],[5,"栏杆-材质(__autogen 1)",2,[[4,-6,[1,"bdIx4QzCRdWKJ4omOy0dSn"],[2],[2],3]],[0,"06684IGDpRkZgLz99t9t6e",1,0]]],0,[0,5,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,8,1,6],[0,0,0,0],[-1,1,-1,1],[386,23,387,388]],[[[6,"材质",[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.08,"roughness":0.5},"albedoScale",8,[1,0.7764705882352941,0.5882352941176472,0.20392156862745092],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[2],[0]],[[[3,".bin",2475538638,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":63360,"length":15840,"count":7920,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":63360,"count":2640,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-9.807107925415039,-1.479974627494812,-36.2996711730957],"maxPosition",8,[1,10.271590232849121,2.3248298168182373,35.445430755615234]]],-1],0,0,[],[],[]],[[[3,".bin",3854685647,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":772992,"length":368544,"count":184272,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":772992,"count":32208,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-10.73701000213623,-2.3248298168182373,-36.3025016784668],"maxPosition",8,[1,10.73701000213623,2.3248298168182373,36.3025016784668]]],-1],0,0,[],[],[]]]]
